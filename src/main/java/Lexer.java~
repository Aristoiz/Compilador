// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\7\1\10\3\0\1\11\2\12\1\13\1\14"+
    "\1\11\1\15\1\16\1\17\1\20\11\21\2\11\1\22"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\34\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\34\1\51\1\52\1\34\1\12\1\0\1\12\1\0"+
    "\1\34\1\0\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\34\1\62\2\34\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\34"+
    "\1\76\1\52\1\34\1\12\1\77\1\12\7\0\1\3"+
    "\73\0\1\100\7\0\1\100\3\0\1\100\3\0\1\100"+
    "\1\0\1\101\6\0\1\102\1\0\1\100\1\103\3\0"+
    "\1\100\7\0\1\100\3\0\1\100\3\0\1\100\1\0"+
    "\1\101\6\0\1\100\1\0\1\100\1\103\u012a\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\1\4\1\3"+
    "\4\5\2\6\1\7\1\1\11\10\1\7\22\10\1\7"+
    "\2\0\1\11\1\12\1\0\1\2\2\13\1\14\7\10"+
    "\1\15\1\10\1\15\26\10\1\16\2\10\1\16\10\10"+
    "\3\0\11\10\1\17\6\10\1\15\42\10\2\0\1\2"+
    "\33\10\1\20\1\10\1\21\6\10\1\16\10\10\1\0"+
    "\6\10\1\22\22\10\1\0\12\10\1\23\6\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\u0110\0\u0154\0\104"+
    "\0\104\0\104\0\u0198\0\u01dc\0\u0220\0\u0264\0\u02a8\0\314"+
    "\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8"+
    "\0\u050c\0\u0550\0\u0330\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\104\0\u0110\0\u0a5c"+
    "\0\104\0\104\0\u0aa0\0\u0ae4\0\104\0\u0b28\0\104\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u0330"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u0330\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024"+
    "\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u1760\0\u2574\0\u25b8\0\u25fc\0\u2640"+
    "\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860"+
    "\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u0330"+
    "\0\u2ca0\0\u0330\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u0330\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u0330\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410"+
    "\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630"+
    "\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\104\0\u3a2c"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\20\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\22\1\30\1\22\1\31\1\32\1\33"+
    "\1\34\1\22\1\35\1\36\1\37\1\22\1\40\1\22"+
    "\1\33\1\22\1\41\1\42\1\43\1\44\1\45\1\22"+
    "\1\46\1\22\1\47\1\50\1\33\1\51\1\22\1\52"+
    "\1\53\1\54\1\22\1\55\1\22\1\2\1\22\1\33"+
    "\1\22\1\56\106\0\1\3\124\0\1\56\67\0\1\10"+
    "\5\0\2\57\1\0\2\57\3\0\52\57\12\0\1\60"+
    "\12\0\2\60\3\0\56\60\15\0\1\61\104\0\1\62"+
    "\101\0\1\63\3\0\1\64\104\0\1\65\1\66\102\0"+
    "\2\17\105\0\1\56\1\67\77\0\2\22\3\0\52\22"+
    "\1\0\3\22\21\0\2\22\3\0\14\22\1\70\24\22"+
    "\1\71\10\22\1\0\3\22\21\0\2\22\3\0\11\22"+
    "\1\72\2\22\1\73\21\22\1\74\13\22\1\0\3\22"+
    "\21\0\2\22\3\0\4\22\1\75\25\22\1\76\17\22"+
    "\1\0\3\22\21\0\2\22\3\0\13\22\1\77\10\22"+
    "\1\100\13\22\1\101\10\22\1\102\1\0\3\22\21\0"+
    "\2\22\3\0\1\103\7\22\1\104\1\105\14\22\1\106"+
    "\6\22\1\107\1\110\13\22\1\0\3\22\21\0\2\22"+
    "\3\0\12\22\1\111\1\112\23\22\1\113\1\114\11\22"+
    "\1\0\3\22\21\0\2\22\3\0\10\22\1\115\41\22"+
    "\1\0\3\22\21\0\2\22\3\0\14\22\1\33\24\22"+
    "\1\33\10\22\1\0\2\22\1\116\21\0\2\22\3\0"+
    "\1\117\25\22\1\120\23\22\1\0\3\22\21\0\2\22"+
    "\3\0\1\121\3\22\1\122\7\22\1\123\11\22\1\124"+
    "\3\22\1\125\6\22\1\126\10\22\1\0\3\22\21\0"+
    "\2\22\3\0\1\127\7\22\1\130\5\22\1\131\7\22"+
    "\1\132\6\22\1\133\5\22\1\134\6\22\1\0\3\22"+
    "\21\0\2\22\3\0\4\22\1\135\7\22\1\136\15\22"+
    "\1\137\6\22\1\140\10\22\1\0\3\22\21\0\2\22"+
    "\3\0\4\22\1\141\25\22\1\142\17\22\1\0\3\22"+
    "\21\0\2\22\3\0\41\22\1\71\10\22\1\0\3\22"+
    "\21\0\2\22\3\0\36\22\1\74\13\22\1\0\3\22"+
    "\21\0\2\22\3\0\32\22\1\76\17\22\1\0\3\22"+
    "\21\0\2\22\3\0\40\22\1\101\10\22\1\102\1\0"+
    "\3\22\21\0\2\22\3\0\26\22\1\106\6\22\1\107"+
    "\1\110\13\22\1\0\3\22\21\0\2\22\3\0\37\22"+
    "\1\113\1\114\11\22\1\0\3\22\21\0\2\22\3\0"+
    "\35\22\1\143\14\22\1\0\3\22\21\0\2\22\3\0"+
    "\41\22\1\33\10\22\1\0\3\22\21\0\2\22\3\0"+
    "\26\22\1\120\23\22\1\0\3\22\21\0\2\22\3\0"+
    "\26\22\1\124\3\22\1\125\6\22\1\126\10\22\1\0"+
    "\3\22\21\0\2\22\3\0\26\22\1\132\6\22\1\133"+
    "\5\22\1\134\6\22\1\0\3\22\21\0\2\22\3\0"+
    "\32\22\1\137\6\22\1\140\10\22\1\0\3\22\21\0"+
    "\2\22\3\0\32\22\1\142\17\22\1\0\3\22\6\0"+
    "\1\144\12\0\2\144\3\0\56\144\1\0\13\145\1\146"+
    "\70\145\2\64\1\3\1\64\1\4\77\64\20\0\2\66"+
    "\102\0\2\22\3\0\14\22\1\147\35\22\1\0\3\22"+
    "\21\0\2\22\3\0\41\22\1\150\10\22\1\0\3\22"+
    "\21\0\2\22\3\0\1\151\51\22\1\0\3\22\21\0"+
    "\2\22\3\0\11\22\1\152\40\22\1\0\3\22\21\0"+
    "\2\22\3\0\26\22\1\153\23\22\1\0\3\22\21\0"+
    "\2\22\3\0\5\22\1\154\44\22\1\0\3\22\21\0"+
    "\2\22\3\0\33\22\1\155\16\22\1\0\3\22\21\0"+
    "\2\22\3\0\21\22\1\156\30\22\1\0\3\22\21\0"+
    "\2\22\3\0\2\22\1\157\12\22\1\160\34\22\1\0"+
    "\3\22\21\0\2\22\3\0\46\22\1\161\3\22\1\0"+
    "\3\22\21\0\2\22\3\0\30\22\1\162\11\22\1\160"+
    "\7\22\1\0\3\22\21\0\2\22\3\0\11\22\1\163"+
    "\40\22\1\0\3\22\21\0\2\22\3\0\13\22\1\164"+
    "\36\22\1\0\3\22\21\0\2\22\3\0\14\22\1\165"+
    "\35\22\1\0\3\22\21\0\2\22\3\0\36\22\1\166"+
    "\13\22\1\0\3\22\21\0\2\22\3\0\40\22\1\167"+
    "\11\22\1\0\3\22\21\0\2\22\3\0\41\22\1\170"+
    "\10\22\1\0\3\22\21\0\2\22\3\0\15\22\1\171"+
    "\34\22\1\0\3\22\21\0\2\22\3\0\10\22\1\172"+
    "\10\22\1\173\30\22\1\0\3\22\21\0\2\22\3\0"+
    "\42\22\1\174\7\22\1\0\3\22\21\0\2\22\3\0"+
    "\35\22\1\175\10\22\1\176\3\22\1\0\3\22\21\0"+
    "\2\22\3\0\4\22\1\177\45\22\1\0\3\22\21\0"+
    "\2\22\3\0\12\22\1\200\37\22\1\0\3\22\21\0"+
    "\2\22\3\0\17\22\1\201\32\22\1\0\3\22\21\0"+
    "\2\22\3\0\44\22\1\202\5\22\1\0\3\22\21\0"+
    "\2\22\3\0\13\22\1\203\36\22\1\0\3\22\21\0"+
    "\2\22\3\0\1\204\20\22\1\205\30\22\1\0\3\22"+
    "\21\0\2\22\3\0\12\22\1\206\37\22\1\0\3\22"+
    "\21\0\2\22\3\0\40\22\1\207\11\22\1\0\3\22"+
    "\21\0\2\22\3\0\26\22\1\210\17\22\1\211\3\22"+
    "\1\0\3\22\21\0\2\22\3\0\37\22\1\212\12\22"+
    "\1\0\3\22\21\0\2\22\3\0\11\22\1\213\40\22"+
    "\1\0\3\22\21\0\2\22\3\0\6\22\1\214\4\22"+
    "\1\215\36\22\1\0\3\22\21\0\2\22\3\0\17\22"+
    "\1\216\32\22\1\0\3\22\21\0\2\22\3\0\36\22"+
    "\1\217\13\22\1\0\3\22\21\0\2\22\3\0\34\22"+
    "\1\220\3\22\1\221\11\22\1\0\3\22\21\0\2\22"+
    "\3\0\44\22\1\222\5\22\1\0\3\22\21\0\2\22"+
    "\3\0\24\22\1\223\25\22\1\0\3\22\21\0\2\22"+
    "\3\0\13\22\1\224\36\22\1\0\3\22\21\0\2\22"+
    "\3\0\51\22\1\225\1\0\3\22\21\0\2\22\3\0"+
    "\40\22\1\226\11\22\1\0\3\22\21\0\2\22\3\0"+
    "\17\22\1\227\32\22\1\0\3\22\21\0\2\22\3\0"+
    "\44\22\1\230\5\22\1\0\3\22\21\0\2\22\3\0"+
    "\32\22\1\231\17\22\1\0\3\22\6\0\1\232\12\0"+
    "\2\232\3\0\56\232\1\0\13\145\1\233\103\145\1\233"+
    "\3\145\1\234\64\145\20\0\2\22\3\0\11\22\1\235"+
    "\40\22\1\0\3\22\21\0\2\22\3\0\36\22\1\236"+
    "\13\22\1\0\3\22\21\0\2\22\3\0\20\22\1\237"+
    "\31\22\1\0\3\22\21\0\2\22\3\0\14\22\1\240"+
    "\35\22\1\0\3\22\21\0\2\22\3\0\45\22\1\241"+
    "\4\22\1\0\3\22\21\0\2\22\3\0\10\22\1\242"+
    "\41\22\1\0\3\22\21\0\2\22\3\0\35\22\1\243"+
    "\14\22\1\0\3\22\21\0\2\22\3\0\4\22\1\244"+
    "\12\22\1\245\32\22\1\0\3\22\21\0\2\22\3\0"+
    "\4\22\1\246\45\22\1\0\3\22\21\0\2\22\3\0"+
    "\32\22\1\247\11\22\1\250\5\22\1\0\3\22\21\0"+
    "\2\22\3\0\32\22\1\251\17\22\1\0\3\22\21\0"+
    "\2\22\3\0\20\22\1\252\31\22\1\0\3\22\21\0"+
    "\2\22\3\0\1\253\51\22\1\0\3\22\21\0\2\22"+
    "\3\0\21\22\1\254\30\22\1\0\3\22\21\0\2\22"+
    "\3\0\45\22\1\255\4\22\1\0\3\22\21\0\2\22"+
    "\3\0\46\22\1\256\3\22\1\0\3\22\21\0\2\22"+
    "\3\0\14\22\1\257\2\22\1\260\32\22\1\0\3\22"+
    "\21\0\2\22\3\0\2\22\1\261\47\22\1\0\3\22"+
    "\21\0\2\22\3\0\4\22\1\262\45\22\1\0\3\22"+
    "\21\0\2\22\3\0\41\22\1\263\2\22\1\264\5\22"+
    "\1\0\3\22\21\0\2\22\3\0\30\22\1\265\21\22"+
    "\1\0\3\22\21\0\2\22\3\0\32\22\1\266\17\22"+
    "\1\0\3\22\21\0\2\22\3\0\13\22\1\267\36\22"+
    "\1\0\3\22\21\0\2\22\3\0\4\22\1\244\45\22"+
    "\1\0\3\22\21\0\2\22\3\0\1\270\51\22\1\0"+
    "\3\22\21\0\2\22\3\0\26\22\1\270\23\22\1\0"+
    "\3\22\21\0\2\22\3\0\6\22\1\271\43\22\1\0"+
    "\3\22\21\0\2\22\3\0\11\22\1\272\40\22\1\0"+
    "\3\22\21\0\2\22\3\0\14\22\1\273\35\22\1\0"+
    "\3\22\21\0\2\22\3\0\15\22\1\274\34\22\1\0"+
    "\3\22\21\0\2\22\3\0\34\22\1\275\15\22\1\0"+
    "\3\22\21\0\2\22\3\0\36\22\1\272\13\22\1\0"+
    "\3\22\21\0\2\22\3\0\41\22\1\276\10\22\1\0"+
    "\3\22\21\0\2\22\3\0\42\22\1\277\7\22\1\0"+
    "\3\22\21\0\2\22\3\0\10\22\1\300\41\22\1\0"+
    "\3\22\21\0\2\22\3\0\22\22\1\237\27\22\1\0"+
    "\3\22\21\0\2\22\3\0\14\22\1\301\35\22\1\0"+
    "\3\22\21\0\2\22\3\0\21\22\1\160\30\22\1\0"+
    "\3\22\21\0\2\22\3\0\35\22\1\302\14\22\1\0"+
    "\3\22\21\0\2\22\3\0\47\22\1\241\2\22\1\0"+
    "\3\22\21\0\2\22\3\0\41\22\1\301\10\22\1\0"+
    "\3\22\21\0\2\22\3\0\46\22\1\160\3\22\1\0"+
    "\3\22\21\0\2\22\3\0\21\22\1\303\30\22\1\0"+
    "\3\22\21\0\2\22\3\0\2\22\1\304\47\22\1\0"+
    "\3\22\21\0\2\22\3\0\46\22\1\305\3\22\1\0"+
    "\3\22\21\0\2\22\3\0\30\22\1\306\21\22\1\0"+
    "\3\22\21\0\2\22\3\0\3\22\1\307\46\22\1\0"+
    "\3\22\21\0\2\22\3\0\31\22\1\310\20\22\1\0"+
    "\3\22\21\0\2\22\3\0\40\22\1\311\11\22\1\0"+
    "\3\22\6\0\1\312\12\0\2\312\3\0\56\312\1\0"+
    "\13\145\1\233\3\145\1\3\64\145\20\0\2\22\3\0"+
    "\4\22\1\313\45\22\1\0\3\22\21\0\2\22\3\0"+
    "\32\22\1\314\17\22\1\0\3\22\21\0\2\22\3\0"+
    "\4\22\1\167\45\22\1\0\3\22\21\0\2\22\3\0"+
    "\17\22\1\272\32\22\1\0\3\22\21\0\2\22\3\0"+
    "\32\22\1\167\17\22\1\0\3\22\21\0\2\22\3\0"+
    "\13\22\1\315\36\22\1\0\3\22\21\0\2\22\3\0"+
    "\40\22\1\316\11\22\1\0\3\22\21\0\2\22\3\0"+
    "\17\22\1\303\32\22\1\0\3\22\21\0\2\22\3\0"+
    "\1\300\51\22\1\0\3\22\21\0\2\22\3\0\15\22"+
    "\1\317\34\22\1\0\3\22\21\0\2\22\3\0\44\22"+
    "\1\305\5\22\1\0\3\22\21\0\2\22\3\0\26\22"+
    "\1\302\23\22\1\0\3\22\21\0\2\22\3\0\42\22"+
    "\1\320\7\22\1\0\3\22\21\0\2\22\3\0\14\22"+
    "\1\321\35\22\1\0\3\22\21\0\2\22\3\0\11\22"+
    "\1\167\40\22\1\0\3\22\21\0\2\22\3\0\1\322"+
    "\51\22\1\0\3\22\21\0\2\22\3\0\41\22\1\321"+
    "\10\22\1\0\3\22\21\0\2\22\3\0\26\22\1\323"+
    "\23\22\1\0\3\22\21\0\2\22\3\0\17\22\1\324"+
    "\32\22\1\0\3\22\21\0\2\22\3\0\10\22\1\325"+
    "\41\22\1\0\3\22\21\0\2\22\3\0\10\22\1\271"+
    "\41\22\1\0\3\22\21\0\2\22\3\0\13\22\1\326"+
    "\36\22\1\0\3\22\21\0\2\22\3\0\44\22\1\327"+
    "\5\22\1\0\3\22\21\0\2\22\3\0\35\22\1\330"+
    "\14\22\1\0\3\22\21\0\2\22\3\0\35\22\1\275"+
    "\14\22\1\0\3\22\21\0\2\22\3\0\40\22\1\331"+
    "\11\22\1\0\3\22\21\0\2\22\3\0\21\22\1\332"+
    "\30\22\1\0\3\22\21\0\2\22\3\0\14\22\1\167"+
    "\35\22\1\0\3\22\21\0\2\22\3\0\17\22\1\333"+
    "\32\22\1\0\3\22\21\0\2\22\3\0\4\22\1\334"+
    "\45\22\1\0\3\22\21\0\2\22\3\0\41\22\1\167"+
    "\10\22\1\0\3\22\21\0\2\22\3\0\44\22\1\335"+
    "\5\22\1\0\3\22\21\0\2\22\3\0\32\22\1\336"+
    "\17\22\1\0\3\22\21\0\2\22\3\0\3\22\1\337"+
    "\46\22\1\0\3\22\21\0\2\22\3\0\31\22\1\340"+
    "\20\22\1\0\3\22\21\0\2\22\3\0\14\22\1\272"+
    "\35\22\1\0\3\22\21\0\2\22\3\0\20\22\1\301"+
    "\31\22\1\0\3\22\21\0\2\22\3\0\41\22\1\272"+
    "\10\22\1\0\3\22\21\0\2\22\3\0\45\22\1\301"+
    "\4\22\1\0\3\22\21\0\2\22\3\0\1\341\51\22"+
    "\1\0\3\22\21\0\2\22\3\0\26\22\1\342\23\22"+
    "\1\0\3\22\21\0\2\22\3\0\46\22\1\343\3\22"+
    "\1\0\3\22\6\0\1\344\12\0\2\344\3\0\56\344"+
    "\21\0\2\22\3\0\1\345\51\22\1\0\3\22\21\0"+
    "\2\22\3\0\26\22\1\346\23\22\1\0\3\22\21\0"+
    "\2\22\3\0\10\22\1\334\41\22\1\0\3\22\21\0"+
    "\2\22\3\0\35\22\1\336\14\22\1\0\3\22\21\0"+
    "\2\22\3\0\21\22\1\271\30\22\1\0\3\22\21\0"+
    "\2\22\3\0\46\22\1\275\3\22\1\0\3\22\21\0"+
    "\2\22\3\0\13\22\1\347\36\22\1\0\3\22\21\0"+
    "\2\22\3\0\40\22\1\350\11\22\1\0\3\22\21\0"+
    "\2\22\3\0\21\22\1\351\30\22\1\0\3\22\21\0"+
    "\2\22\3\0\12\22\1\237\37\22\1\0\3\22\21\0"+
    "\2\22\3\0\21\22\1\337\30\22\1\0\3\22\21\0"+
    "\2\22\3\0\46\22\1\352\3\22\1\0\3\22\21\0"+
    "\2\22\3\0\37\22\1\241\12\22\1\0\3\22\21\0"+
    "\2\22\3\0\46\22\1\340\3\22\1\0\3\22\21\0"+
    "\2\22\3\0\17\22\1\353\32\22\1\0\3\22\21\0"+
    "\2\22\3\0\13\22\1\337\36\22\1\0\3\22\21\0"+
    "\2\22\3\0\17\22\1\167\32\22\1\0\3\22\21\0"+
    "\2\22\3\0\40\22\1\340\11\22\1\0\3\22\21\0"+
    "\2\22\3\0\44\22\1\167\5\22\1\0\3\22\21\0"+
    "\2\22\3\0\1\167\51\22\1\0\3\22\21\0\2\22"+
    "\3\0\26\22\1\167\23\22\1\0\3\22\21\0\2\22"+
    "\3\0\3\22\1\354\46\22\1\0\3\22\21\0\2\22"+
    "\3\0\31\22\1\355\20\22\1\0\3\22\21\0\2\22"+
    "\3\0\44\22\1\356\5\22\1\0\3\22\6\0\1\357"+
    "\12\0\2\357\3\0\56\357\21\0\2\22\3\0\13\22"+
    "\1\303\36\22\1\0\3\22\21\0\2\22\3\0\40\22"+
    "\1\305\11\22\1\0\3\22\21\0\2\22\3\0\21\22"+
    "\1\360\30\22\1\0\3\22\21\0\2\22\3\0\46\22"+
    "\1\361\3\22\1\0\3\22\21\0\2\22\3\0\1\334"+
    "\51\22\1\0\3\22\21\0\2\22\3\0\26\22\1\336"+
    "\23\22\1\0\3\22\21\0\2\22\3\0\1\362\51\22"+
    "\1\0\3\22\21\0\2\22\3\0\4\22\1\363\45\22"+
    "\1\0\3\22\21\0\2\22\3\0\32\22\1\364\17\22"+
    "\1\0\3\22\21\0\2\22\3\0\26\22\1\365\23\22"+
    "\1\0\3\22\21\0\2\22\3\0\4\22\1\272\45\22"+
    "\1\0\3\22\21\0\2\22\3\0\32\22\1\272\17\22"+
    "\1\0\3\22\21\0\2\22\3\0\20\22\1\270\31\22"+
    "\1\0\3\22\21\0\2\22\3\0\17\22\1\252\32\22"+
    "\1\0\3\22\21\0\2\22\3\0\44\22\1\255\5\22"+
    "\1\0\3\22\21\0\2\22\3\0\45\22\1\270\4\22"+
    "\1\0\3\22\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15300];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\3\11\43\1\1\11\2\0\2\11"+
    "\1\0\1\1\1\11\1\1\1\11\54\1\3\0\63\1"+
    "\2\0\56\1\1\0\31\1\1\0\12\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 20: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 21: break;
          case 3:
            { return token(yytext(), "AGRUPACION", yyline, yycolumn);
            }
          // fall through
          case 22: break;
          case 4:
            { return token(yytext(), "PUNTACIÓN", yyline, yycolumn);
            }
          // fall through
          case 23: break;
          case 5:
            { return token(yytext(), "OPERADOR", yyline, yycolumn);
            }
          // fall through
          case 24: break;
          case 6:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
          // fall through
          case 25: break;
          case 7:
            { return token(yytext(), "OPERADORES LOGICOS", yyline, yycolumn);
            }
          // fall through
          case 26: break;
          case 8:
            { return token(yytext(), "ID", yyline, yycolumn);
            }
          // fall through
          case 27: break;
          case 9:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
          // fall through
          case 28: break;
          case 10:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
          // fall through
          case 29: break;
          case 11:
            { return token(yytext(), "ERROR_01", yyline, yycolumn);
            }
          // fall through
          case 30: break;
          case 12:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
          // fall through
          case 31: break;
          case 13:
            { return token(yytext(), "RESERVADA", yyline, yycolumn);
            }
          // fall through
          case 32: break;
          case 14:
            { return token(yytext(), "CONDICIONAL", yyline, yycolumn);
            }
          // fall through
          case 33: break;
          case 15:
            { return token(yytext(), "ARITMETICAS", yyline, yycolumn);
            }
          // fall through
          case 34: break;
          case 16:
            { return token(yytext(), "CICLO", yyline, yycolumn);
            }
          // fall through
          case 35: break;
          case 17:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
          // fall through
          case 36: break;
          case 18:
            { return token(yytext(), "BOOLEANOS", yyline, yycolumn);
            }
          // fall through
          case 37: break;
          case 19:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
          // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
