/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import compilerTools.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Logger;
import java.util.regex.Pattern;

/**
 * @author mauri
 */
public class Main extends JFrame {
    Directorio dir;
    private ArrayList<Token> tokens;
    private ArrayList<ErrorLSSL> errors;
    private ArrayList<TextColor> textsColor;
    private Timer timerKeyReleased;
    private ArrayList<Production> identProd;
    private HashMap<String, String> identificadores;
    private boolean codeHasBeenCompiled = false;
    private ArrayList<Production> funcProd;
    private ArrayList<Production> asigProd;
    private ArrayList<Production> asigProdConID;
    private ArrayList<Production> compaProdIzq;
    private ArrayList<Production> compaProdDer;
    private ArrayList<Production> compaProdDoble;
    private ArrayList<Production> operProdIzq;
    private ArrayList<Production> operProdDer;
    private ArrayList<Production> operProdDoble;
    private ArrayList<Production> printProd;
    private String codigoIntermedio;
    private String codigoOptimizado;
    private ArrayList<Production> ifProd;
    private ArrayList<Production> whileProd;
    private ArrayList<String> codObj;
    private ArrayList<String> codObjComp;
    private ArrayList<String> variables;
    private ArrayList<Production> defProd;
    private ArrayList<Production> identProdCopia;
    ArrayList<ArrayList<Token>> prods = new ArrayList<ArrayList<Token>>();
    public static HashMap<String, Object> variablesMap;
    public static HashMap<String, String> operadoresLogicos;

    /**
     * Creates new form IDE
     */
    public Main() {
        initComponents();
        inicializar();
        this.setLocationRelativeTo(null);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new JButton();
        btnNuevo = new JButton();
        btnAbrir = new JButton();
        btnReserved = new JButton();
        btnIdent = new JButton();
        btnTokens = new JButton();
        btnCompilar = new JButton();
        jScrollPane1 = new JScrollPane();
        jtpCode = new JTextPane();
        jScrollPane3 = new JScrollPane();
        jtaCompile = new JTextArea();
        jScrollPane2 = new JScrollPane();
        tblTokens = new JTable();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        btnGuardar.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8_save_48px.png")); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar Documento");
        btnGuardar.setHorizontalTextPosition(SwingConstants.CENTER);
        btnGuardar.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8_save_48px_p.png")); // NOI18N
        btnGuardar.setVerticalAlignment(SwingConstants.BOTTOM);
        btnGuardar.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8_code_file_48px.png")); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.setToolTipText("Nuevo Documento");
        btnNuevo.setHorizontalTextPosition(SwingConstants.CENTER);
        btnNuevo.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8_code_file_48px_p.png")); // NOI18N
        btnNuevo.setVerticalAlignment(SwingConstants.BOTTOM);
        btnNuevo.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnAbrir.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8_opened_folder_48px.png")); // NOI18N
        btnAbrir.setText("Abrir");
        btnAbrir.setToolTipText("Abrir Documento");
        btnAbrir.setHorizontalTextPosition(SwingConstants.CENTER);
        btnAbrir.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8_opened_folder_48px_P.png")); // NOI18N
        btnAbrir.setVerticalAlignment(SwingConstants.BOTTOM);
        btnAbrir.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnReserved.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8-text-color-48.png")); // NOI18N
        btnReserved.setText("Reservadas");
        btnReserved.setToolTipText("Palabras Reservadas");
        btnReserved.setHorizontalTextPosition(SwingConstants.CENTER);
        btnReserved.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8-text-color-48.png")); // NOI18N
        btnReserved.setVerticalAlignment(SwingConstants.BOTTOM);
        btnReserved.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnReserved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnReservedActionPerformed(evt);
            }
        });

        btnIdent.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8-text-cursor-48.png")); // NOI18N
        btnIdent.setText("Ident");
        btnIdent.setToolTipText("Indentacion");
        btnIdent.setHorizontalTextPosition(SwingConstants.CENTER);
        btnIdent.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8-text-cursor-48.png")); // NOI18N
        btnIdent.setVerticalAlignment(SwingConstants.BOTTOM);
        btnIdent.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnIdent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnIdentActionPerformed(evt);
            }
        });

        btnTokens.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8-index-48.png")); // NOI18N
        btnTokens.setText("Tokens");
        btnTokens.setToolTipText("Abrir Tokens");
        btnTokens.setAutoscrolls(true);
        btnTokens.setHorizontalTextPosition(SwingConstants.CENTER);
        btnTokens.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8-index-48.png")); // NOI18N
        btnTokens.setVerticalAlignment(SwingConstants.BOTTOM);
        btnTokens.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTokensActionPerformed(evt);
            }
        });

        btnCompilar.setIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\Icon\\icons8_code_48px.png")); // NOI18N
        btnCompilar.setText("Compilar");
        btnCompilar.setToolTipText("Compilar");
        btnCompilar.setAutoscrolls(true);
        btnCompilar.setHorizontalTextPosition(SwingConstants.CENTER);
        btnCompilar.setSelectedIcon(new ImageIcon("C:\\Users\\mauri\\Downloads\\untitled\\src\\main\\resources\\pressed\\icons8_code_48px_p.png")); // NOI18N
        btnCompilar.setVerticalAlignment(SwingConstants.BOTTOM);
        btnCompilar.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        jtpCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtpCodeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtpCode);

        jtaCompile.setColumns(20);
        jtaCompile.setRows(5);
        jScrollPane3.setViewportView(jtaCompile);

        tblTokens.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                },
                new String[]{
                        "Componente Lexico", "Lexema", "[Linea, Columna]"
                }
        ));
        jScrollPane2.setViewportView(tblTokens);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 1014, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 593, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(btnNuevo)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnGuardar)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnAbrir)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnReserved)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnIdent)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnTokens)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnCompilar)))
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 403, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(btnNuevo)
                                        .addComponent(btnIdent)
                                        .addComponent(btnReserved)
                                        .addComponent(btnAbrir)
                                        .addComponent(btnGuardar)
                                        .addComponent(btnCompilar)
                                        .addComponent(btnTokens))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
                                .addGap(40, 40, 40)
                                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        dir.Guardar(this);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnNuevoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        jtaCompile.setText("");
        dir.Nuevo(this);
        Functions.clearDataInTable(tblTokens);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAbrirActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        dir.Abrir(this);
        colorAnalyzer();
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnReservedActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnReservedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnReservedActionPerformed

    private void btnIdentActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnIdentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnIdentActionPerformed

    private void btnTokensActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnTokensActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTokensActionPerformed

    private void btnCompilarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        if (getTitle().contains("*") || !codeHasBeenCompiled) {
            if (dir.Guardar(this)) {
                Compile();
            }

        } else {
            Compile();
        }


    }//GEN-LAST:event_btnCompilarActionPerformed

    private void Compile() {
        clearFields();
        lexicalAnalyzer();
        fillTableTokens();
        syntaxAnalyzer();
        semanticAnalyzer();
        printConsole();
        codeHasBeenCompiled = true;
    }

    private void clearFields() {
        Functions.clearDataInTable(tblTokens);
        jtaCompile.setText("");
        tokens.clear();
        errors.clear();
        identProd.clear();
        printProd.clear();
        if (identProdCopia != null)
            identProdCopia.clear();
        if (asigProd != null)
            asigProd.clear();
        if (asigProdConID != null)
            asigProdConID.clear();
        if (compaProdIzq != null)
            compaProdIzq.clear();
        if (compaProdDer != null)
            compaProdDer.clear();
        if (compaProdDoble != null)
            compaProdDoble.clear();
        if (operProdIzq != null)
            operProdIzq.clear();
        if (operProdDer != null)
            operProdDer.clear();
        if (operProdDoble != null)
            operProdDoble.clear();
        if (funcProd != null)
            funcProd.clear();
        if (ifProd != null)
            ifProd.clear();
        if (whileProd != null)
            whileProd.clear();
        identificadores.clear();
        codeHasBeenCompiled = false;
    }

    private void printConsole() {
        System.out.println(errors.size());
        int sizeErrors = errors.size();
        if (sizeErrors > 0) {
            System.out.println("Errores Encontrados: ");
            Functions.sortErrorsByLineAndColumn(errors);
            String strErrors = "\n";
            for (ErrorLSSL error : errors) {
                String strError = String.valueOf(error);
                strErrors += strError + "\n";
            }
            jtaCompile.setText("Errores Encontrados: \n" + strErrors +
                    "\n Compilacion Terminada con errores...");
        } else {
            jtaCompile.setText("Compilacion Terminada...");
            CodeBlock codeBlock = Functions.splitCodeInCodeBlocks(tokens, "{", "}", ";");
            ArrayList<String> blocksOfCode = codeBlock.getBlocksOfCodeInOrderOfExec();
            executeCode(blocksOfCode, 1);
        }
    }

    private void executeCode(ArrayList<String> blocksOfCode, int repeats) {
        for (int j = 1; j <= repeats; j++) {
            int repeatCode = -1;
            for (int i = 0; i < blocksOfCode.size(); i++) {
                String blockOfCode = blocksOfCode.get(i);
                if (repeatCode != -1) {
                    int[] posicionMarcador = CodeBlock.getPositionOfBothMarkers(blocksOfCode, blockOfCode);
                    executeCode(new ArrayList<>(blocksOfCode.subList(posicionMarcador[0], posicionMarcador[1])), repeatCode);
                    repeatCode = -1;
                    i = posicionMarcador[1];
                } else {
                    String[] sentencias = blockOfCode.split(";");
                    String uuidRegex = "~[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}~";
                    Pattern uuidPattern = Pattern.compile(uuidRegex);
                    for (String sentence : sentencias) {
                        sentence = sentence.trim();
                        //System.out.println(sentence);
                        if (sentence.startsWith("ENTERO")) {
                        }/* else if (sentence.toLowerCase().startsWith("definir")) {
                            //Tomar los parametros dentro de los parentesis
                            String[] parametros = sentence.substring(sentence.indexOf("(") + 1, sentence.indexOf(")")).split(",");
                            for (String parametro : parametros) {
                                parametro = parametro.trim();
                            }
                        }*/
                        if (sentence.toLowerCase().startsWith("si")) {
                            //Declarando funcion if

                            String[] condicion = sentence.substring(sentence.indexOf("(")+2, sentence.indexOf(")")).split(" ");
                            //Da resultado a [A, condicion, B]
                            System.out.println(Arrays.asList(condicion));
                            for (int k=0; k<condicion.length; k++){
                                if(operadoresLogicos.containsKey(condicion[k])){
                                    String operador = (String) operadoresLogicos.get(condicion[k]);
                                    System.out.println(operador);
                                    Float valor1 = 0.0f;
                                    Float valor2 = 0.0f;

                                    if(variablesMap.containsKey(condicion[k-1])){
                                        String valorTemp = (String) variablesMap.get(condicion[k-1]);
                                        valor1 = Float.parseFloat(valorTemp);
                                    }else {
                                        valor1 = Float.parseFloat(condicion[k-1]);
                                    }if(variablesMap.containsKey(condicion[k+1])){
                                        String valorTemp = (String) variablesMap.get(condicion[k+1]);
                                        System.out.println(valorTemp);
                                        valor2 = Float.parseFloat(valorTemp);
                                    }else {
                                        valor2 = Float.parseFloat(condicion[k+1]);
                                    }
                                    System.out.println(valor1);
                                    System.out.println(valor2);

                                    switch (operadoresLogicos.get(condicion[k])){
                                        case "IGUAL":
                                            if (valor1.equals(valor2)){
                                                System.out.println("Se cumple la condicion");
                                            }
                                            break;
                                        case "DIFERENTE":
                                            if (!valor1.equals(valor2)){
                                                System.out.println("Se cumple la condicion");
                                            }
                                            break;
                                        case "MAYOR":
                                            if (valor1 > valor2){
                                                System.out.println("Se cumple la condicion");
                                            }
                                            break;
                                        case "MENOR":
                                            if (valor1 < valor2){
                                                System.out.println("Se cumple la condicion");
                                            }
                                            break;
                                        case "MAYORIGUAL":
                                            if (valor1 >= valor2){
                                                System.out.println("Se cumple la condicion");
                                            }
                                            break;
                                        case "MENORIGUAL":
                                            if (valor1 <= valor2){
                                                System.out.println("Se cumple la condicion");
                                            }
                                            break;
                                    }
                                }
                            }

                        }
                        if (sentence.toLowerCase().startsWith("imprime")){
                            jtaCompile.append("\n");
                            String[] imprimir = sentence.substring(sentence.indexOf("(")+2, sentence.indexOf(")")).split(",");
                            if(variablesMap.containsKey(imprimir[0].trim())){
                                jtaCompile.append(variablesMap.get(imprimir[0].trim()) + "\n");
                            }else {
                                jtaCompile.append(imprimir[0] + "\n");
                            }
                        }
//                        System.out.println("======SENTENCIA======");
//                        System.out.println(sentence);
//                        System.out.println("======SENTENCIA======");

                        if (sentence.contains("*") || sentence.contains("/") || sentence.contains("+") || sentence.contains("-") && !uuidPattern.matcher(sentence).find()
                                && !sentence.toLowerCase().contains("definir") && !sentence.toLowerCase().contains("si") && !sentence.toLowerCase().contains("imprime")) {
                            String[] operacion = sentence.split(" ");
                            //Reemplazar signos de operacion por su lexema
                            for (int k = 0; k < operacion.length; k++) {
                                if (operadoresLogicos.containsKey(operacion[k])) {
                                    operacion[k] = operadoresLogicos.get(operacion[k]);
                                }
                            }
                            //Remover los valores antes de =>
                            for (int k = 0; k < operacion.length; k++) {
                                if (operacion[k].contains("=>")) {
                                    operacion = Arrays.copyOfRange(operacion, k + 1, operacion.length);
                                    break;
                                }
                            }
                            //Reemplazar las literales por su valor
                            for (int k = 0; k < operacion.length; k++) {
                                if (variablesMap.containsKey(operacion[k])) {
                                    operacion[k] = (String) variablesMap.get(operacion[k]);
                                }
                            }

                            //Concatenar todo en un string
                            String operacionString = "";
                            for (int k = 0; k < operacion.length; k++) {
                                operacionString += operacion[k]+" ";
                            }
                            System.out.println("======SENTENCIA======");
                            System.out.println(operacionString);
                            System.out.println("======SENTENCIA======");
                            //Evaluar la operacion usando a la clase Operaciones
                            Operaciones operaciones = new Operaciones();
                            Float resultado = operaciones.operacion(operacionString);
                            System.out.println("======RESULTADO======");
                            System.out.println(resultado);
                            System.out.println("======RESULTADO======");
                            //Obtener la variable a la que se le asignará el resultado a partir de la sentencia

                            String variable = "";
                            String[] sentencia = sentence.split(" ");
                            for (int k = 0; k < sentencia.length; k++) {
                                if (sentencia[k].contains("=>")) {
                                    variable = sentencia[k - 1];
                                    break;
                                }
                            }
                            //Cambiamos el valor en el mapa de variables
                            variablesMap.put(variable, resultado.toString());


                        }
                    }
                }
            }
        }

    }
    private void arbolDeExpresion (String s){

    }
    private void semanticAnalyzer() {
        HashMap<String, String> tiposDatos = new HashMap<>();
        tiposDatos.put("NUMERO", "INT");
        tiposDatos.put("REAL", "FLOAT");
        tiposDatos.put("CADENA", "STRING");
        tiposDatos.put("TRUE", "BOOLEAN");
        tiposDatos.put("FALSE", "BOOLEAN");
        int i = 0;
        for (Production id : identProd) {
            //System.out.println(id.lexemeRank(0,-1)); //int x = 4 ;
            //System.out.println(id.lexemeRank(1)); //x
            //System.out.println(id.lexicalCompRank(0,-1)); //INT ID ASIGNACION NUMERO PUNTOCOMA
            if (!identificadores.containsKey(id.lexemeRank(1))) {
                identificadores.put(id.lexemeRank(1), id.lexicalCompRank(0));
                //Guardar los valores de ENTERO, REAL, CADENA, BOOLEAN
                System.out.println("EJECUNTANDO " + id.lexemeRank(0));
                if (id.lexemeRank(0).equalsIgnoreCase("ENTERO") ||
                        id.lexemeRank(0).equalsIgnoreCase("REAL") ||
                        id.lexemeRank(0).equalsIgnoreCase("CADENA") ||
                        id.lexemeRank(0).equalsIgnoreCase("BOOLEAN")) {
                    variablesMap.put(id.lexemeRank(1), id.lexemeRank(3));
                }

                i++;
            } else {
                errors.add(new ErrorLSSL(1, "Error semántico: Ya existe un identificador llamado " + id.lexemeRank(1), id, true));
            }

        }
        System.out.println(Arrays.asList(identificadores)); // muestra identificadores
        for (Production id : asigProd) {
            if (!identificadores.containsKey(id.lexemeRank(0))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable \"" + id.lexemeRank(0) + "\" no declarada. [#, %]", id, true));
            } else {
                if (!identificadores.get(id.lexemeRank(0)).equals(tiposDatos.get(id.lexicalCompRank(2)))) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo " + identificadores.get(id.lexemeRank(0)) + " [#, %]", id, true));
                }
            }


        }
        for (Production id : asigProdConID) {
            if (!identificadores.containsKey(id.lexemeRank(0)) || !identificadores.containsKey(id.lexemeRank(2))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable no declarada. [#, %]", id, true));
            } else {
                if (!identificadores.get(id.lexemeRank(0)).equals(identificadores.get(id.lexemeRank(2)))) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo " + identificadores.get(id.lexemeRank(0)) + " [#, %]", id, true));

                }
            }

        }
        //comparacion cuando ID está en la izquierda
        for (Production id : compaProdIzq) {

            if (!identificadores.containsKey(id.lexemeRank(0))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(0) + " no declarada. [#, %]", id, true));
            } else {
                if (identificadores.get(id.lexemeRank(0)).matches("STRING")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo STRING, imposible comparar [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(0)).matches("BOOLEAN") && !id.lexicalCompRank(1).matches("IGUAL|DIFERENTE")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo BOOLEAN, sólo posible comparar con operadores IGUAL y DIFERENTE [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(0)).matches("BOOLEAN") && !id.lexicalCompRank(2).matches("TRUE|FALSE")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo BOOLEAN, sólo posible comparar con valores booleanos [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(0)).matches("INT|FLOAT")) {
                    if (!id.lexicalCompRank(2).matches("NUMERO|REAL|ID")) {
                        errors.add(new ErrorLSSL(1, "Error semántico : Valor numérico de variable \"" + id.lexemeRank(0) + "\" no se puede comparar con valor no numérico [#, %]", id, true));
                    }
                }


            }

        }// FOR  COMPAPRODIZQ

        for (Production id : compaProdDer) {

            if (!identificadores.containsKey(id.lexemeRank(2))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(2) + " no declarada. [#, %]", id, true));
            } else {
                if (identificadores.get(id.lexemeRank(2)).matches("STRING")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo STRING, imposible comparar [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(2)).matches("BOOLEAN") && !id.lexicalCompRank(1).matches("IGUAL|DIFERENTE")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo BOOLEAN, sólo posible comparar con operadores IGUAL y DIFERENTE [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(2)).matches("BOOLEAN") && !id.lexicalCompRank(0).matches("TRUE|FALSE")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo BOOLEAN, sólo posible comparar con valores booleanos [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(2)).matches("INT|FLOAT")) {
                    if (!id.lexicalCompRank(0).matches("NUMERO|REAL")) {
                        errors.add(new ErrorLSSL(1, "Error semántico : Valor numérico de variable \"" + id.lexemeRank(2) + "\" no se puede comparar con valor no numérico [#, %]", id, true));
                    }
                }


            }

        }// FOR  COMPAPRODDER
        for (Production id : compaProdDoble) {

            if (!identificadores.containsKey(id.lexemeRank(0)) || !identificadores.containsKey(id.lexemeRank(2))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(0) + " no declarada. [#, %]", id, true));
            } else {
                if (identificadores.get(id.lexemeRank(0)).matches("STRING") || identificadores.get(id.lexemeRank(2)).matches("STRING")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo STRING, imposible comparar [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(0)).matches("BOOLEAN") && !id.lexicalCompRank(1).matches("IGUAL|DIFERENTE")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo BOOLEAN, sólo posible comparar con operadores IGUAL y DIFERENTE [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(2)).matches("BOOLEAN") && !id.lexicalCompRank(1).matches("IGUAL|DIFERENTE")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo BOOLEAN, sólo posible comparar con operadores IGUAL y DIFERENTE [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(0)).matches("BOOLEAN") && !identificadores.get(id.lexemeRank(2)).matches("BOOLEAN")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo BOOLEAN, sólo posible comparar con valores booleanos [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(2)).matches("BOOLEAN") && !identificadores.get(id.lexemeRank(0)).matches("BOOLEAN")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo BOOLEAN, sólo posible comparar con valores booleanos [#, %]", id, true));
                }
                if (identificadores.get(id.lexemeRank(0)).matches("INT|FLOAT")) {
                    if (!identificadores.get(id.lexemeRank(2)).matches("INT|FLOAT")) {
                        errors.add(new ErrorLSSL(1, "Error semántico : Valor numérico de variable \"" + id.lexemeRank(0) + "\" no se puede comparar con valor no numérico [#, %]", id, true));
                    }
                }
                if (identificadores.get(id.lexemeRank(2)).matches("INT|FLOAT")) {
                    if (!identificadores.get(id.lexemeRank(0)).matches("INT|FLOAT")) {
                        errors.add(new ErrorLSSL(1, "Error semántico : Valor numérico de variable \"" + id.lexemeRank(0) + "\" no se puede comparar con valor no numérico [#, %]", id, true));
                    }
                }


            }

        }// FOR  COMPAPRODdoble
        for (Production id : operProdIzq) {

            if (!identificadores.containsKey(id.lexemeRank(0))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(0) + " no declarada. [#, %]", id, true));
            } else {
                if (identificadores.get(id.lexemeRank(0)).matches("STRING|BOOLEAN")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo " + identificadores.get(id.lexemeRank(0)) + ", imposible hacer operaciones aritméticas [#, %]", id, true));
                }

            }
            if (identificadores.get(id.lexemeRank(0)).matches("INT") && id.lexicalCompRank(1).matches("DIVISION")) {
                errors.add(new ErrorLSSL(1, "Error semántico : División en valor entero [#, %]", id, true));
            }
        }// FOR  OPERPRODIZQ
        for (Production id : operProdDer) {

            if (!identificadores.containsKey(id.lexemeRank(2))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(2) + " no declarada. [#, %]", id, true));
            } else {
                if (identificadores.get(id.lexemeRank(2)).matches("STRING|BOOLEAN")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo " + identificadores.get(id.lexemeRank(0)) + ", imposible hacer operaciones aritméticas [#, %]", id, true));
                }

            }

        }// FOR  OPERPRODDER
        for (Production id : operProdDoble) {

            if (!identificadores.containsKey(id.lexemeRank(0)) || !identificadores.containsKey(id.lexemeRank(2))) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(0) + " no declarada. [#, %]", id, true));
            } else {
                if (identificadores.get(id.lexemeRank(0)).matches("STRING|BOOLEAN") || identificadores.get(id.lexemeRank(2)).matches("STRING|BOOLEAN")) {
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(0) + "\" es de tipo " + identificadores.get(id.lexemeRank(0)) + ", imposible hacer operaciones aritméticas [#, %]", id, true));
                    errors.add(new ErrorLSSL(1, "Error semántico : Variable \"" + id.lexemeRank(2) + "\" es de tipo " + identificadores.get(id.lexemeRank(2)) + ", imposible hacer operaciones aritméticas [#, %]", id, true));

                }

            }

        }// FOR  OPERPRODDOBLE
        for (Production id: printProd){
            //Si id.lexemeRank(2) es un ID evaluar si esta declarada si es una cadena un numero o un booleano imprimir el valor
            String s = id.lexemeRank(2);
            id.lexicalCompRank(2);
            if(!identificadores.containsKey(id.lexemeRank(2)) && id.lexicalCompRank(2).equalsIgnoreCase("ID")) {
                errors.add(new ErrorLSSL(1, "Error semántico: Variable " + id.lexemeRank(2) + " no declarada. [#, %]", id, true));
            }
            System.out.println("======PRINTPROD======");
            System.out.println(s);
            System.out.println(id.lexicalCompRank(2));
            System.out.println("======PRINTPROD======");
        }

        //Print all variables form VariablesMap
        System.out.println("================================");
        variablesMap.forEach((k, v) -> {
            System.out.println("Variable: " + k + " Valor: " + v);
        });
        System.out.println("================================");

    }

    private void syntaxAnalyzer() {
        Grammar gramatica = new Grammar(tokens, errors);
        /* Eliminacion de errores */
        gramatica.delete(new String[]{"ERROR", "ERROR_01"}, 1);
        /*Mostrar Gramaticas*/
        gramatica.group("REAL", "NUMERO PUNTO NUMERO");
        //-----------------CONTENIDO----------------------
// CONTENIDO puede ser una declaración, asignación o una condición
        gramatica.group("CONTENIDO", "DECL_INT");
        gramatica.group("CONTENIDO", "DECL_FLOAT");
        gramatica.group("CONTENIDO", "DECL_BOOL");
        gramatica.group("CONTENIDO", "DECL_STRING");
        gramatica.group("CONTENIDO", "PROD_ASIG");
        gramatica.group("CONTENIDO", "PROD_ASIG_ID");
        gramatica.group("CONTENIDO", "CONDICION");

//-----------------SENTENCIA----------------------
// SENTENCIA puede ser una operación o un bloque condicional
        gramatica.group("SENTENCIA", "CONTENIDO");
        gramatica.group("SENTENCIA", "OPERACION");
        gramatica.group("SENTENCIA", "CONDICION BLOQUE_SENTENCIA");


// Bloque de sentencias que puede contener varias sentencias
        gramatica.group("BLOQUE_SENTENCIA", "LLAVE_IZQ SENTENCIA* LLAVE_DER");

// Estructura de una condición y bloque condicional
        gramatica.group("CONDICION_BLOQUE", "IF CONDICION BLOQUE_SENTENCIA ELSE BLOQUE_SENTENCIA");
        gramatica.group("CONDICION_BLOQUE", "IF CONDICION BLOQUE_SENTENCIA");


        //-------------OPERACION---------------
        //FORMAS DE CREAR UNA FUNCION CORRECTAMENTE
        gramatica.group("OPERACION", "REAL (SUMA|RESTA|MULTIPLICACION|DIVISION) REAL");
        gramatica.group("OPERACION", "REAL (SUMA|RESTA|MULTIPLICACION|DIVISION) NUMERO");
        gramatica.group("OPERACION", "REAL (SUMA|RESTA|MULTIPLICACION|DIVISION) ID");
        gramatica.group("OPERACION", "NUMERO (SUMA|RESTA|MULTIPLICACION|DIVISION) REAL");
        gramatica.group("OPERACION", "ID (SUMA|RESTA|MULTIPLICACION|DIVISION) NUMERO", operProdIzq);
        gramatica.group("OPERACION", "ID (SUMA|RESTA|MULTIPLICACION|DIVISION) REAL");
        gramatica.group("OPERACION", "NUMERO (SUMA|RESTA|MULTIPLICACION|DIVISION) NUMERO");
        gramatica.group("OPERACION", "NUMERO (SUMA|RESTA|MULTIPLICACION|DIVISION) ID", operProdDer);
        gramatica.group("OPERACION", "ID (SUMA|RESTA|MULTIPLICACION|DIVISION) NUMERO", operProdIzq);
        gramatica.group("OPERACION", "ID (SUMA|RESTA|MULTIPLICACION|DIVISION) ID", operProdDoble);
        gramatica.group("OPERACION", "OPERACION (SUMA|RESTA|MULTIPLICACION|DIVISION) REAL");
        gramatica.group("OPERACION", "OPERACION (SUMA|RESTA|MULTIPLICACION|DIVISION) NUMERO");
        gramatica.group("OPERACION", "OPERACION (SUMA|RESTA|MULTIPLICACION|DIVISION) ID", operProdDer);
        gramatica.group("OPERACION", "REAL (SUMA|RESTA|MULTIPLICACION|DIVISION) OPERACION");
        gramatica.group("OPERACION", "NUMERO (SUMA|RESTA|MULTIPLICACION|DIVISION) OPERACION");
        gramatica.group("OPERACION", "ID (SUMA|RESTA|MULTIPLICACION|DIVISION) OPERACION", operProdIzq);
        //Operacion de longitud variable
        gramatica.group("OPERACION", "OPERACION (SUMA|RESTA|MULTIPLICACION|DIVISION) OPERACION");

        //ERRORES operacion
        gramatica.group("OPERACION_ER", "NUMERO (SUMA|RESTA|MULTIPLICACION|DIVISION)", 2, "ERROR_SINTACTICO: se necesita un minimo de 2 valores para ralizar la operacion [#, %]");
        gramatica.group("OPERACION_ER", "(SUMA|RESTA|MULTIPLICACION|DIVISION) NUMERO", 2, "ERROR SINTACTICO: se necesita un minimo de 2 valores para ralizar la operacion [#, %]");
        gramatica.group("OPERACION_ER", "ID (SUMA|RESTA|MULTIPLICACION|DIVISION)", 2, "ERROR SINTACTICO: se necesita un minimo de 2 valores para ralizar la operacion [#, %]");
        gramatica.group("OPERACION_ER", "(SUMA|RESTA|MULTIPLICACION|DIVISION) ID", 2, "ERROR SINTACTICO: se necesita un minimo de 2 valores para ralizar la operacion [#, %]");

        //FORMA CORRECTA DE DECLARAR UNA VARIABLE------------------------------------------------------------
        gramatica.group("DECL_FLOAT", "FLOAT ID PUNTOCOMA", identProd);
        gramatica.group("DECL_FLOAT", "FLOAT ID ASIGNACION ID PUNTOCOMA", identProd);
        gramatica.group("DECL_FLOAT", "FLOAT ID ASIGNACION REAL PUNTOCOMA", identProd);
        gramatica.group("DECL_FLOAT", "FLOAT ID ASIGNACION OPERACION PUNTOCOMA", identProd);

        gramatica.group("DECL_INT", "INT ID PUNTOCOMA", identProd);
        gramatica.group("DECL_INT", "INT ID ASIGNACION ID PUNTOCOMA", identProd);
        gramatica.group("DECL_INT", "INT ID ASIGNACION NUMERO PUNTOCOMA", identProd);
        gramatica.group("DECL_INT", "INT ID ASIGNACION OPERACION PUNTOCOMA", identProd);

        gramatica.group("DECL_BOOL", "BOOLEAN ID PUNTOCOMA", identProd);
        gramatica.group("DECL_BOOL", "BOOLEAN ID ASIGNACION ID PUNTOCOMA", identProd);
        gramatica.group("DECL_BOOL", "BOOLEAN ID ASIGNACION (TRUE|FALSE) PUNTOCOMA", identProd);

        gramatica.group("DECL_STRING", "STRING ID PUNTOCOMA", identProd);
        gramatica.group("DECL_STRING", "STRING ID ASIGNACION ID PUNTOCOMA", identProd);
        gramatica.group("DECL_STRING", "STRING ID ASIGNACION CADENA PUNTOCOMA", identProd);
        //ERRORES SINTACTICOS---------------------------------------------------------------------------
        //POSIBLES ERRORES AL DECLARAR UNA VARIABLE INT O FLOAT
        gramatica.group("DECL_INT", "INT ID ASIGNACION PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA ASIGNAR UN VALOR A LA VARIABLE [#, %]");
        gramatica.group("DECL_INT", "INT ID NUMERO PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID ID PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID NUMERO", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID ID", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID OPERACION PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID OPERACION", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID ASIGNACION ID", 2, "ERROR_SINTACTICO: PUNTOCOMA(;) NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID ASIGNACION REAL", 2, "ERROR_SINTACTICO: VALOR NO ENTERO [#, %]");

//gramatica.group("DECL_INT", "INT ID ASIGNACION NUMERO",2,"ERROR_SINTACTICO: PUNTOCOMA(;) NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT ID ASIGNACION OPERACION", 2, "ERROR_SINTACTICO: PUNTOCOMA(;) NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT  ASIGNACION NUMERO PUNTOCOMA", 2, "ERROR_SINTACTICO: ID NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT  ASIGNACION ID PUNTOCOMA", 2, "ERROR_SINTACTICO: ID NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_INT", "INT  ASIGNACION OPERACION PUNTOCOMA", 2, "ERROR_SINTACTICO: ID NO AGREGADO EN LA DECLARACION [#, %]");

        //POSIBLES ERRORES AL DECLARAR UN FLOAT
        gramatica.group("DECL_FLOAT", "FLOAT ID ASIGNACION PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA ASIGNAR UN VALOR A LA VARIABLE [#, %]");
        gramatica.group("DECL_FLOAT", "FLOAT ID REAL PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_FLOAT", "FLOAT ID REAL", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_FLOAT", "FLOAT ID ASIGNACION REAL", 2, "ERROR_SINTACTICO: PUNTOCOMA(;) NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_FLOAT", "FLOAT ASIGNACION REAL PUNTOCOMA", 2, "ERROR_SINTACTICO: ID NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_FLOAT", "FLOAT ID ASIGNACION NUMERO PUNTOCOMA", 2, "Error sintáctico: Valor float sin punto decimal [#, %]");

        //POSIBLES ERRORES AL DECLARAR UN FLOAT
        gramatica.group("DECL_STRING", "STRING ID ASIGNACION PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA ASIGNAR UN VALOR A LA VARIABLE [#, %]");
        gramatica.group("DECL_STRING", "STRING ID CADENA PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_STRING", "STRING ID CADENA", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN DE ASIGNACION EN LA DECLARACION [#, %]");
        gramatica.group("DECL_STRING", "STRING ID ASIGNACION CADENA", 2, "ERROR_SINTACTICO: PUNTOCOMA(;) NO AGREGADO EN LA DECLARACION [#, %]");
        gramatica.group("DECL_STRING", "STRING ASIGNACION CADENA PUNTOCOMA", 2, "ERROR_SINTACTICO: ID NO AGREGADO EN LA DECLARACION [#, %]");

        //ERRORES SEMANTICOS DE VARIABLES -------------------------------------------------------------
        gramatica.group("RESERV_INDEB", "(STRING|INT|FLOAT|BOOLEAN) (IMPORT|DEF|CLASS|IF|ELSE|FOR|IN|WHILE|RETURN)", 2, "ERROR SEMANTICO \\{}: USO INDEBIDO DE PALABRAS RESERVADAS [#,%]");

        gramatica.group("ERROR_OP_STRING", "(SUMA|RESTA|MULTIPLICACION|DIVISION) CADENA", 2, "ERROR SEMANTICO \\{}: OPERACION NO PERMITIDA PARA CADENA [#,%]");
        gramatica.group("ERROR_OP_STRING", "CADENA (SUMA|RESTA|MULTIPLICACION|DIVISION)", 2, "ERROR SEMANTICO \\{}: OPERACION NO PERMITIDA PARA CADENA [#,%]");
        gramatica.group("ERROR_OP_BOOLEAN", "(SUMA|RESTA|MULTIPLICACION|DIVISION) (TRUE|FALSE)", 2, "ERROR SEMANTICO \\{}: OPERACION NO PERMITIDA PARA BOOLEANO [#,%]");
        gramatica.group("ERROR_OP_BOOLEAN", "(TRUE|FALSE) (SUMA|RESTA|MULTIPLICACION|DIVISION)", 2, "ERROR SEMANTICO \\{}: OPERACION NO PERMITIDA PARA BOOLEANO [#,%]");

        gramatica.group("DECL_INT", "(INT ID ASIGNACION REAL PUNTOCOMA)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES ENTERO [#,%]");
        gramatica.group("DECL_INT", "(INT ID ASIGNACION CADENA)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES ENTERO [#,%]");
        gramatica.group("DECL_INT", "(INT ID ASIGNACION (TRUE|FALSE))", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES ENTERO [#,%]");
        gramatica.group("DECL_INT", "INT", 2, "ERROR");

        gramatica.group("DECL_FLOAT", "(FLOAT ID ASIGNACION CADENA)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES DECIMAL [#,%]");
        gramatica.group("DECL_FLOAT", "(FLOAT ID ASIGNACION (TRUE|FALSE))", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES DECIMAL [#,%]");
        gramatica.group("DECL_FLOAT", "(FLOAT ID ASIGNACION NUMERO PUNTOCOMA)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES DECIMAL [#,%]");
        gramatica.group("ERROR_FLOAT", "FLOAT", 2, "ERROR");

        gramatica.group("DECL_STRING", "(STRING ID ASIGNACION NUMERO)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES CADENA [#,%]");
        gramatica.group("DECL_STRING", "(STRING ID ASIGNACION (TRUE|FALSE))", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES CADENA [#,%]");
        gramatica.group("DECL_STRING", "STRING", 2, "ERROR");

        gramatica.group("ERROR_ASIG_BOOL", "(BOOLEAN ID ASIGNACION NUMERO)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES BOOLEANO [#,%]");
        gramatica.group("ERROR_ASIG_BOOL", "(BOOLEAN ID ASIGNACION (TRUE|FALSE))", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES BOOLEANO [#,%]");
        gramatica.group("ERROR_ASIG_BOOL", "(BOOLEAN ID ASIGNACION CADENA)", 2, "ERROR SEMANTICO \\{}: VALOR ASIGNADO NO ES BOOLEANO [#,%]");


        //ASIGNACION DE UN ID
        gramatica.group("PROD_ASIG", "ID ASIGNACION (CADENA|REAL|NUMERO|TRUE|FALSE) PUNTOCOMA", asigProd);
        gramatica.group("PROD_ASIG", "ID ASIGNACION NUMERO", 2, "ERROR SINTACTICO FALTA ';' EN LA LINEA [#,%]");
        gramatica.group("PROD_ASIG", "ID ASIGNACION OPERACION PUNTOCOMA", asigProd);
        gramatica.group("PROD_ASIG_ID", "ID ASIGNACION ID PUNTOCOMA", asigProdConID);

        //--------------------------------------------------------------------------------------------

        //-------------CONDICION--------------------------
        //FORMAS CORRECTAS DE CREAR UNA CONDICION
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) NUMERO");
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) OPERACION");
        gramatica.group("CONDICION", "REAL (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) OPERACION");

        gramatica.group("CONDICION", "REAL (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) NUMERO");
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) REAL");
        gramatica.group("CONDICION", "REAL (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) REAL");
        gramatica.group("CONDICION", "(TRUE|FALSE) (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) (TRUE|FALSE)");
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ID", compaProdDer);
        gramatica.group("CONDICION", "REAL (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ID", compaProdDer);
        gramatica.group("CONDICION", "ID (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) NUMERO", compaProdIzq);
        gramatica.group("CONDICION", "ID (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) OPERACION", compaProdIzq);
        gramatica.group("CONDICION", "ID (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) REAL", compaProdIzq);
        gramatica.group("CONDICION", "ID (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ID", compaProdDoble);
        gramatica.group("CONDICION", "(TRUE|FALSE) (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ID", compaProdDer);
        gramatica.group("CONDICION", "ID (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) (TRUE|FALSE)", compaProdIzq);

        gramatica.group("CONDICION", "CONDICION (AND|OR) CONDICION");

        //ERRORES SEMANTICOS
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) CADENA", 2, "ERROR_SEMANTICO \\{}: DATOS INCOMPATIBLES PARA SU COMPARACION [#, %]");
        gramatica.group("CONDICION", "REAL (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) CADENA", 2, "ERROR_SEMANTICO \\{}: DATOS INCOMPATIBLES PARA SU COMPARACION [#, %]");
        gramatica.group("CONDICION", "CADENA (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) NUMERO", 2, "ERROR_SEMANTICO \\{}: DATOS INCOMPATIBLES PARA SU COMPARACION [#, %]");
        gramatica.group("CONDICION", "CADENA (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) REAL", 2, "ERROR_SEMANTICO \\{}: DATOS INCOMPATIBLES PARA SU COMPARACION [#, %]");
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) (TRUE|FALSE)", 2, "ERROR_SEMANTICO \\{}: DATOS INCOMPATIBLES PARA SU COMPARACION [#, %]");
        gramatica.group("CONDICION", "REAL (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) (TRUE|FALSE)", 2, "ERROR_SEMANTICO \\{}: DATOS INCOMPATIBLES PARA SU COMPARACION [#, %]");

        //----------------------------------------------------------------------------------------------

        //----------------WHILE Y IF-----------------------
        //FORMAS CORRECTAS DE DECLARAR UN IF
        gramatica.group("INSTR_IF", "IF PARENTESISABIERTO CONDICION PARENTESISCERRADO LLAVEABIERTO", true, ifProd);
        //FORMAS CORRECTAS DE DECLARAR UN WHILE
        gramatica.group("INSTR_WHILE", "WHILE PARENTESISABIERTO CONDICION PARENTESISCERRADO LLAVEABIERTO", whileProd);
        //POSIBLES ERRORES AL DECLARAR UN IF
        gramatica.group("INSTR_IF", "IF PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO", true, 4, "ERROR_SINTACTICO: FALTA LA CONDICION [#, %]");
        gramatica.group("INSTR_IF", "IF CONDICION PARENTESISCERRADO LLAVEABIERTO", true, 4, "ERROR_SINTACTICO: FALTA EL PARENTESIS ABIERTO EN LA CONDICION [#, %]");
        gramatica.group("INSTR_IF", "IF PARENTESISABIERTO CONDICION PARENTESISCERRADO", true, 4, "ERROR_SINTACTICO: FALTA DE LLAVE DE APERTURA [#, %]");
        gramatica.finalLineColumn();
        gramatica.group("INSTR_IF", "IF PARENTESISABIERTO CONDICION", true, 4, "ERROR_SINTACTICO: ERROR EN LA CONDICION O FALTA DEL PARENTESIS [#, %]");
        gramatica.initialLineColumn();
        gramatica.group("INSTR_IF", "IF", 2, "ERROR");

        //POSIBLES ERRORES DE WHILE
        gramatica.group("INSTR_WHILE", "WHILE PARENTESISABIERTO PARENTESISCERRADO", true, 4, "ERROR_SINTACTICO: FALTA LA CONDICION [#, %]");
        gramatica.group("INSTR_WHILE", "WHILE CONDICION PARENTESISCERRADO", true, 4, "ERROR_SINTACTICO: FALTA EL PARENTESIS ABIERTO EN LA CONDICION [#, %]");
        gramatica.group("INSTR_WHILE", "WHILE PARENTESISABIERTO CONDICION PARENTESISCERRADO", true, 4, "ERROR_SINTACTICO: FALTA DE LLAVE DE APERTURA [#, %]");
        gramatica.finalLineColumn();
        gramatica.group("INSTR_WHILE", "WHILE PARENTESISABIERTO CONDICION", true, 4, "ERROR_SINTACTICO: ERROR EN LA CONDICION O FALTA DEL PARENTESIS [#, %]");
        gramatica.initialLineColumn();
        gramatica.group("INSTR_WHILE", "WHILE", 2, "ERROR WHILE");
        //POSIBLES ERRORES EN LAS CODICIONES
        gramatica.group("CONDICION", "NUMERO (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ", 2, "ERROR_SINTACTICO: ERROR EN LA CONDICION [#, %]");
        gramatica.group("CONDICION", "ID (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ", 2, "ERROR_SINTACTICO: ERROR EN LA CONDICION [#, %]");
        gramatica.group("CONDICION", " (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) NUMERO ", 2, "ERROR_SINTACTICO: ERROR EN LA CONDICION [#, %]");
        gramatica.group("CONDICION", " (IGUAL|DIFERENTE|MAYORQUE|MENORQUE|MAYORIGUALQUE|MENORIGUALQUE) ID ", 2, "ERROR_SINTACTICO: ERROR EN LA CONDICION [#, %]");
        gramatica.group("CONDICION", "CONDICION (AND|OR)", 2, "ERROR_SINTACTICO: ERROR EN LA CONDICION [#, %]");
        //------------------------------------------------------------------------

        //------------------------------------------------------------
        //INPUT-------------------------------------------------------
        //FORMA CORRECTA
        gramatica.group("INSTR_INPUT", "INPUT PARENTESISABIERTO CADENA PARENTESISCERRADO PUNTOCOMA ", funcProd);
        gramatica.group("INSTR_INPUT", "INPUT PARENTESISABIERTO ID PARENTESISCERRADO PUNTOCOMA ", funcProd);

        gramatica.group("INSTR_OUTPUT", "OUTPUT PARENTESISABIERTO CADENA PARENTESISCERRADO PUNTOCOMA ", funcProd);
        gramatica.group("INSTR_OUTPUT", "OUTPUT PARENTESISABIERTO ID PARENTESISCERRADO PUNTOCOMA ", funcProd);

        //ERRORES SINTACTICOS
        gramatica.group("INSTR_INPUT", "INPUT PARENTESISABIERTO CADENA PARENTESISCERRADO", 2, "ERROR_SINTACTICO \\{}: FALTA DEL TOKEN (;) [#,%]");
        gramatica.group("INSTR_INPUT", "INPUT CADENA PARENTESISCERRADO PUNTOCOMA", 2, "ERROR_SINTACTICO \\{}: FALTA DEL PARENTESIS ABIERTO [#,%]");

        //ERROR SEMANTICO
        gramatica.group("INSTR_INPUT", "INPUT PARENTESISABIERTO (NUMERO|REAL) PARENTESISCERRADO PUNTOCOMA ", 2, "ERROR SEMANTICO \\{}: VALOR INVALIDO EN INPUT[#,%]");
        gramatica.group("INSTR_INPUT", "INPUT", 2, "ERROR INPUT");
        //ERRORES SINTACTICOS
        gramatica.group("INSTR_INPUT", "OUTPUT PARENTESISABIERTO CADENA PARENTESISCERRADO", 2, "ERROR_SINTACTICO \\{}: FALTA DEL TOKEN (;) [#,%]");
        gramatica.group("INSTR_INPUT", "OUTPUT CADENA PARENTESISCERRADO PUNTOCOMA", 2, "ERROR_SINTACTICO \\{}: FALTA DEL PARENTESIS ABIERTO [#,%]");

        //ERROR SEMANTICO
        gramatica.group("INSTR_INPUT", "OUTPUT PARENTESISABIERTO (NUMERO|REAL) PARENTESISCERRADO PUNTOCOMA ", 2, "ERROR SEMANTICO \\{}: VALOR INVALIDO EN INPUT[#,%]");
        gramatica.group("INSTR_INPUT", "OUTPUT", 2, "ERROR INPUT");

        //------------------------------------------------------------
        //FUNCIONES-------------------------------------------------------
        //FORMAS DE CREAR UNA FUNCION CORRECTAMENTE
        //gramatica.group("PARAMETROS", "ID (COMA ID)*",true);
        gramatica.group("INSTR_DEF", "DEF ID PARENTESISABIERTO (ID (COMA ID)*)? PARENTESISCERRADO LLAVEABIERTO", defProd);
        gramatica.group("LLAMAR_DEF", "ID PARENTESISABIERTO (ID (COMA ID)*)? PARENTESISCERRADO PUNTOCOMA", funcProd);
        //POSIBLES ERRORES AL DECLARAR UNA FUNCION
        gramatica.group("INSTR_DEF", "DEF ID (ID (COMA ID)*)? PARENTESISCERRADO LLAVEABIERTO", true, 4, "ERROR_SINTACTICO: FALTA EL PARENTESIS ABIERTO EN LA DEFINICION [#, %]");
        gramatica.group("INSTR_DEF", "DEF ID PARENTESISABIERTO (ID (COMA ID)*)? PARENTESISCERRADO", true, 4, "ERROR_SINTACTICO: FALTA DE LLAVE DE APERTURA [#, %]");

        gramatica.group("INSTR_DEF", "DEF ID PARENTESISABIERTO (ID (COMA ID)*)?", true, 4, "ERROR_SINTACTICO: ERROR EN LA DEFINICION O FALTA DEL PARENTESIS [#, %]");
        gramatica.group("INSTR_DEF", "DEF ID PARENTESISABIERTO (ID (COMA ID)*)? LLAVEABIERTO", true, 4, "ERROR_SINTACTICO: ERROR EN LA DEFINICION O FALTA DEL PARENTESIS [#, %]");
        gramatica.finalLineColumn();
        gramatica.group("DEF_COMPLET", "INSTR_DEF (OPERACION|DECL_FLOAT|" +
                "DECL_INT|DECL_BOOL|INSTR_IF|INSTR_WHILE|DECL_STRING|" +
                "INSTR_INPUT|INSTR_OUTPUT|LLAMAR_DEF|PROD_ASIG|CONDICION|)* LLAVECERRADO", true);

        gramatica.group("DEF_COMPLET", "INSTR_DEF (OPERACION|DECL_FLOAT|" +
                "DECL_INT|DECL_BOOL|INSTR_IF|INSTR_WHILE|DECL_STRING|" +
                "INSTR_INPUT|INSTR_OUTPUT|LLAMAR_DEF|PROD_ASIG|CONDICION|PRINT)*", true, 4, "ERROR_SINTACTICO: FALTA DE LLAVE DE CIERRE [#, %]");

        gramatica.group("DEF_COMPLET", "INSTR_DEF LLAVECERRADO", true, 4, "ERROR_SINTACTICO: FALTA CONTENIDO EN LA FUNCION [#, %]");
        //ERRORES EN LAS ESTRUCTURAS DE CONTROL CICLOS Y FUNCIONES

        //SINTAXIS DE IMPRESION
        gramatica.group("PRINT", "PRINT PARENTESISABIERTO (REAL|NUMERO|CADENA|ID) PARENTESISCERRADO PUNTOCOMA", printProd);
        gramatica.group("PRINT", "PRINT PARENTESISABIERTO (REAL|NUMERO|CADENA|ID) PARENTESISCERRADO", 2, "ERROR_SINTACTICO: FALTA DEL TOKEN (;) [#,%]");
        gramatica.group("PRINT", "PRINT PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL VALOR A IMPRIMIR [#,%]");
        gramatica.group("PRINT", "PRINT PARENTESISABIERTO (REAL|NUMERO|CADENA|ID) PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL PARENTESIS DE CIERRE [#,%]");
        gramatica.group("PRINT", "PRINT  (REAL|NUMERO|CADENA|ID) PARENTESISCERRADO PUNTOCOMA", 2, "ERROR_SINTACTICO: FALTA DEL PARENTESIS DE APERTURA [#,%]");

        gramatica.show();
    }

    private void fillTableTokens() {
        tokens.forEach((token) -> {
            Object[] data = new Object[]{token.getLexicalComp(), token.getLexeme()
                    , "[" + token.getLine() + "," + token.getColumn() + "]"};
            Functions.addRowDataInTable(tblTokens, data);
        });
    }

    private void lexicalAnalyzer() {
        Lexer lexer;
        File codigo = new File("code.ars");
        try {
            FileOutputStream outputStream = new FileOutputStream(codigo);
            byte[] bytesText = jtpCode.getText().getBytes();
            outputStream.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF-8"));
            lexer = new Lexer(entrada);
            while (true) {
                Token token = lexer.yylex();
                if (token == null) {
                    break;
                }
                tokens.add(token);
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    public void clearAllComp() {
        Functions.clearDataInTable(tblTokens);
        tokens.clear();
        errors.clear();
        identProd.clear();
        if (identProdCopia != null)
            identProdCopia.clear();
        if (identProd != null)
            identProd.clear();
        if (asigProd != null)
            asigProd.clear();
        if (asigProdConID != null)
            asigProdConID.clear();
        if (compaProdIzq != null)
            compaProdIzq.clear();
        if (compaProdDer != null)
            compaProdDer.clear();
        if (compaProdDoble != null)
            compaProdDoble.clear();
        if (operProdIzq != null)
            operProdIzq.clear();
        if (operProdDer != null)
            operProdDer.clear();
        if (operProdDoble != null)
            operProdDoble.clear();
        if (funcProd != null)
            funcProd.clear();
        if (ifProd != null)
            ifProd.clear();
        if (whileProd != null)
            whileProd.clear();
        identificadores.clear();

        codeHasBeenCompiled = false;
        jtpCode.setText("");
        jtaCompile.setText("");
    }

    private void jtpCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtpCodeKeyReleased
        //colorAnalyzer();
    }//GEN-LAST:event_jtpCodeKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnAbrir;
    private JButton btnCompilar;
    private JButton btnGuardar;
    private JButton btnIdent;
    private JButton btnNuevo;
    private JButton btnReserved;
    private JButton btnTokens;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTextArea jtaCompile;
    public JTextPane jtpCode;
    private JTable tblTokens;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
        dir = new Directorio();
        //Importante Definiar Abrir Guardar y Guardar Como
        setTitle("#ARS");
        String[] options = new String[]{"Guardar y continuar", "Descargar"};
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dir.Cerrar(Main.this);

            }
        });
        Functions.setLineNumberOnJTextComponent(jtpCode);
        timerKeyReleased = new Timer(300, (ActionEvent e) -> {
            timerKeyReleased.stop();
            int posicion = jtpCode.getCaretPosition();
            jtpCode.setText(jtpCode.getText().replaceAll("[\r]+", ""));
            jtpCode.setCaretPosition(posicion);
            colorAnalyzer();
        });
        Functions.insertAsteriskInName(this, jtpCode, () -> {
            timerKeyReleased.restart();
        });
        tokens = new ArrayList<>();
        errors = new ArrayList<>();
        textsColor = new ArrayList<>();
        identProd = new ArrayList<>();
        ifProd = new ArrayList<>();
        whileProd = new ArrayList<>();
        printProd = new ArrayList<>();
        asigProd = new ArrayList<>();
        asigProdConID = new ArrayList<>();
        compaProdIzq = new ArrayList<>();
        compaProdDer = new ArrayList<>();
        compaProdDoble = new ArrayList<>();
        operProdIzq = new ArrayList<>();
        operProdDer = new ArrayList<>();
        operProdDoble = new ArrayList<>();
        funcProd = new ArrayList<>();
        codObj = new ArrayList<>();
        codObjComp = new ArrayList<>();
        variables = new ArrayList<>();
        variablesMap = new HashMap<>();
        operadoresLogicos = new HashMap<>();

        identificadores = new HashMap<>();
        operadoresLogicos.put("Y", "AND");
        operadoresLogicos.put("O", "OR");
        operadoresLogicos.put("NO", "NOT");
        operadoresLogicos.put("<", "MENOR");
        operadoresLogicos.put(">", "MAYOR");
        operadoresLogicos.put("<=", "MENORIGUAL");
        operadoresLogicos.put(">=", "MAYORIGUAL");
        operadoresLogicos.put("==", "IGUAL");
        operadoresLogicos.put("!=", "DIFERENTE");
        operadoresLogicos.put("+", "SUMA");
        operadoresLogicos.put("-", "RESTA");
        operadoresLogicos.put("*", "MULTIPLICACION");
        operadoresLogicos.put("/", "DIVISION");


        Functions.setAutocompleterJTextComponent(new String[]{}, jtpCode, () -> {
            timerKeyReleased.restart();
        });
    }

    private void colorAnalyzer() {
        /* Limpiar el arreglo de colores */
        textsColor.clear();
        /* Extraer rangos de colores */
        LexerColor lexerColor;
        try {
            File codigo = new File("color.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpCode.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF8"));
            lexerColor = new LexerColor(entrada);
            while (true) {
                TextColor textColor = lexerColor.yylex();
                if (textColor == null) {
                    break;
                }
                textsColor.add(textColor);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
        Functions.colorTextPane(textsColor, jtpCode, new Color(40, 40, 40));
    }
}
