// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/Lexer.flex

import compilerTools.Token;



@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\7\1\10\3\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\40\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\40\1\55\1\56\1\40\1\57\1\0"+
    "\1\60\1\0\1\40\1\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\40\1\70\2\40\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\40\1\104\1\56\1\40\1\105\1\106\1\107"+
    "\7\0\1\3\73\0\1\110\7\0\1\110\3\0\1\110"+
    "\3\0\1\110\1\0\1\111\6\0\1\112\1\0\1\110"+
    "\1\113\3\0\1\110\7\0\1\110\3\0\1\110\3\0"+
    "\1\110\1\0\1\111\6\0\1\110\1\0\1\110\1\113"+
    "\u012a\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\1\1\21\11\22\1\23\5\22"+
    "\1\24\1\25\1\26\15\22\1\27\1\30\1\24\1\31"+
    "\1\32\2\0\1\33\1\34\1\0\1\2\1\0\2\35"+
    "\1\36\1\37\1\40\1\41\7\22\1\42\1\22\1\42"+
    "\14\22\1\43\12\22\1\44\2\22\1\44\10\22\3\0"+
    "\2\45\11\22\1\46\6\22\1\47\40\22\2\0\1\2"+
    "\34\22\1\50\10\22\1\51\1\52\11\22\1\0\2\22"+
    "\1\53\1\54\10\22\1\55\14\22\1\56\5\22\1\57"+
    "\1\22\1\60\1\61\3\22\1\0\4\22\1\62\10\22"+
    "\1\63\6\22\1\64\1\22\1\65\3\22\1\66\2\22"+
    "\1\67\1\70\1\71\3\22\1\72\1\73\2\22\1\74"+
    "\3\22\1\75\1\76\1\77\1\100\2\22\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\114\0\230\0\344\0\u0130\0\u017c\0\114"+
    "\0\114\0\114\0\114\0\u01c8\0\114\0\u0214\0\114\0\u0260"+
    "\0\u02ac\0\u02f8\0\114\0\114\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u0428\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0428\0\114"+
    "\0\114\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18"+
    "\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\114\0\114"+
    "\0\114\0\114\0\114\0\u0130\0\u0c2c\0\114\0\114\0\u0c78"+
    "\0\u0cc4\0\u0d10\0\114\0\u0d5c\0\114\0\114\0\114\0\114"+
    "\0\u0da8\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc"+
    "\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c"+
    "\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4\0\u0428\0\u1430"+
    "\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690"+
    "\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0"+
    "\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50"+
    "\0\114\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64"+
    "\0\u1db0\0\u1dfc\0\u1e48\0\u0428\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78"+
    "\0\u1fc4\0\u2010\0\u0428\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c"+
    "\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec"+
    "\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c"+
    "\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac"+
    "\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u1b04\0\u2a74\0\u2ac0"+
    "\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20"+
    "\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80"+
    "\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0"+
    "\0\u322c\0\u3278\0\u0428\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u33f4"+
    "\0\u3440\0\u348c\0\u34d8\0\u0428\0\u0428\0\u3524\0\u3570\0\u35bc"+
    "\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c"+
    "\0\u3868\0\u0428\0\u0428\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4"+
    "\0\u3a30\0\u3a7c\0\u3ac8\0\u0428\0\u3b14\0\u3b60\0\u3bac\0\u3bf8"+
    "\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58"+
    "\0\u0428\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u0428\0\u4020"+
    "\0\u0428\0\u0428\0\u406c\0\u40b8\0\u4104\0\u4150\0\u419c\0\u41e8"+
    "\0\u4234\0\u4280\0\u0428\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u43fc"+
    "\0\u4448\0\u4494\0\u44e0\0\u0428\0\u452c\0\u4578\0\u45c4\0\u4610"+
    "\0\u465c\0\u46a8\0\u0428\0\u46f4\0\u0428\0\u4740\0\u478c\0\u47d8"+
    "\0\114\0\u4824\0\u4870\0\u0428\0\u0428\0\u0428\0\u48bc\0\u4908"+
    "\0\u4954\0\u0428\0\u0428\0\u49a0\0\u49ec\0\u0428\0\u4a38\0\u4a84"+
    "\0\u4ad0\0\u0428\0\u0428\0\u0428\0\u0428\0\u4b1c\0\u4b68\0\u0428";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\30\1\36"+
    "\1\30\1\37\1\40\1\41\1\42\1\30\1\43\1\44"+
    "\1\45\1\30\1\46\1\30\1\47\1\50\1\51\1\30"+
    "\1\52\1\53\1\54\1\55\1\56\1\30\1\57\1\30"+
    "\1\60\1\61\1\41\1\62\1\30\1\63\1\64\1\65"+
    "\1\30\1\66\1\30\1\67\1\2\1\70\1\30\1\41"+
    "\1\30\1\71\116\0\1\3\140\0\1\72\73\0\1\73"+
    "\7\0\2\74\1\0\2\74\5\0\26\74\2\0\24\74"+
    "\14\0\1\75\14\0\2\75\5\0\26\75\2\0\24\75"+
    "\1\0\1\75\1\0\3\75\16\0\1\76\115\0\1\77"+
    "\110\0\1\100\4\0\1\101\112\0\1\102\1\0\1\103"+
    "\1\104\110\0\1\102\1\0\2\22\117\0\1\105\113\0"+
    "\1\106\1\107\112\0\1\110\106\0\2\30\5\0\26\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\14\30"+
    "\1\111\11\30\2\0\13\30\1\112\10\30\3\0\3\30"+
    "\23\0\2\30\5\0\11\30\1\113\2\30\1\114\11\30"+
    "\2\0\10\30\1\115\13\30\3\0\3\30\23\0\2\30"+
    "\5\0\4\30\1\116\21\30\2\0\4\30\1\117\17\30"+
    "\3\0\3\30\23\0\2\30\5\0\13\30\1\120\10\30"+
    "\1\121\1\30\2\0\12\30\1\122\10\30\1\123\3\0"+
    "\3\30\23\0\2\30\5\0\1\124\7\30\1\125\1\126"+
    "\14\30\2\0\1\127\6\30\1\130\1\131\13\30\3\0"+
    "\3\30\23\0\2\30\5\0\12\30\1\132\1\133\12\30"+
    "\2\0\11\30\1\134\1\135\11\30\3\0\3\30\23\0"+
    "\2\30\5\0\10\30\1\136\15\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\14\30\1\137\11\30\2\0"+
    "\13\30\1\137\10\30\3\0\2\30\1\140\23\0\2\30"+
    "\5\0\1\141\25\30\2\0\1\142\23\30\3\0\3\30"+
    "\23\0\2\30\5\0\1\143\3\30\1\144\7\30\1\145"+
    "\11\30\2\0\1\146\3\30\1\147\6\30\1\150\10\30"+
    "\3\0\3\30\23\0\2\30\5\0\1\151\7\30\1\152"+
    "\5\30\1\153\7\30\2\0\1\154\6\30\1\155\5\30"+
    "\1\156\6\30\3\0\3\30\23\0\2\30\5\0\4\30"+
    "\1\157\7\30\1\160\11\30\2\0\4\30\1\161\6\30"+
    "\1\162\10\30\3\0\3\30\23\0\2\30\5\0\4\30"+
    "\1\163\21\30\2\0\4\30\1\164\17\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\13\30\1\112\10\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\10\30"+
    "\1\115\13\30\3\0\3\30\23\0\2\30\5\0\26\30"+
    "\2\0\4\30\1\117\17\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\12\30\1\122\10\30\1\123\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\1\127\6\30"+
    "\1\130\1\131\13\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\11\30\1\134\1\135\11\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\7\30\1\165\14\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\13\30"+
    "\1\137\10\30\3\0\3\30\23\0\2\30\5\0\26\30"+
    "\2\0\1\142\23\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\1\146\3\30\1\147\6\30\1\150\10\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\1\154"+
    "\6\30\1\155\5\30\1\156\6\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\4\30\1\161\6\30\1\162"+
    "\10\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\4\30\1\164\17\30\3\0\3\30\6\0\1\166\14\0"+
    "\2\166\5\0\26\166\2\0\24\166\1\0\1\166\1\0"+
    "\3\166\1\0\14\167\1\170\77\167\2\101\1\3\1\101"+
    "\1\4\107\101\22\0\1\171\1\172\112\0\2\104\112\0"+
    "\2\30\5\0\14\30\1\173\11\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\13\30\1\174"+
    "\10\30\3\0\3\30\23\0\2\30\5\0\1\175\25\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\11\30"+
    "\1\176\14\30\2\0\24\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\1\177\23\30\3\0\3\30\23\0"+
    "\2\30\5\0\5\30\1\200\20\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\5\30\1\201"+
    "\16\30\3\0\3\30\23\0\2\30\5\0\21\30\1\202"+
    "\4\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\2\30\1\203\12\30\1\204\10\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\20\30\1\205"+
    "\3\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\2\30\1\206\11\30\1\204\7\30\3\0\3\30\23\0"+
    "\2\30\5\0\11\30\1\207\14\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\13\30\1\210\12\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\14\30\1\211"+
    "\11\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\10\30\1\212\13\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\12\30\1\213\11\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\13\30\1\214"+
    "\10\30\3\0\3\30\23\0\2\30\5\0\15\30\1\215"+
    "\10\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\10\30\1\216\10\30\1\217\4\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\14\30\1\220"+
    "\7\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\7\30\1\221\10\30\1\222\3\30\3\0\3\30\23\0"+
    "\2\30\5\0\4\30\1\223\21\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\12\30\1\224\13\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\17\30\1\225"+
    "\6\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\16\30\1\226\5\30\3\0\3\30\23\0"+
    "\2\30\5\0\13\30\1\227\12\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\21\30\1\230\4\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\12\30\1\231"+
    "\13\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\12\30\1\232\11\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\20\30\1\233\3\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\11\30\1\234"+
    "\12\30\3\0\3\30\23\0\2\30\5\0\11\30\1\235"+
    "\14\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\6\30\1\236\4\30\1\237\12\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\17\30\1\240\6\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\10\30\1\241\13\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\6\30\1\242\3\30\1\243\11\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\16\30\1\244"+
    "\5\30\3\0\3\30\23\0\2\30\5\0\24\30\1\245"+
    "\1\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\13\30\1\246\12\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\23\30\1\247\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\12\30\1\250\11\30"+
    "\3\0\3\30\23\0\2\30\5\0\17\30\1\251\6\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\26\30"+
    "\2\0\16\30\1\252\5\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\4\30\1\253\17\30\3\0\3\30"+
    "\6\0\1\254\14\0\2\254\5\0\26\254\2\0\24\254"+
    "\1\0\1\254\1\0\3\254\1\0\14\167\1\255\113\167"+
    "\1\255\4\167\1\256\72\167\22\0\2\172\112\0\2\30"+
    "\5\0\11\30\1\257\14\30\2\0\24\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\10\30\1\260\13\30"+
    "\3\0\3\30\23\0\2\30\5\0\20\30\1\261\5\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\14\30"+
    "\1\262\11\30\2\0\24\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\17\30\1\263\4\30\3\0\3\30"+
    "\23\0\2\30\5\0\10\30\1\264\15\30\2\0\24\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\7\30"+
    "\1\265\14\30\3\0\3\30\23\0\2\30\5\0\4\30"+
    "\1\266\12\30\1\267\6\30\2\0\24\30\3\0\3\30"+
    "\23\0\2\30\5\0\4\30\1\270\21\30\2\0\24\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\4\30"+
    "\1\271\11\30\1\272\5\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\4\30\1\273\17\30\3\0\3\30"+
    "\23\0\2\30\5\0\20\30\1\274\5\30\2\0\24\30"+
    "\3\0\3\30\23\0\2\30\5\0\1\275\25\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\21\30\1\276"+
    "\4\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\17\30\1\277\4\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\20\30\1\300\3\30\3\0"+
    "\3\30\23\0\2\30\5\0\14\30\1\301\2\30\1\302"+
    "\6\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\2\30\1\303\23\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\4\30\1\304\21\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\13\30\1\305"+
    "\2\30\1\306\5\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\2\30\1\307\21\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\4\30\1\310\17\30\3\0"+
    "\3\30\23\0\2\30\5\0\13\30\1\311\12\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\4\30\1\312"+
    "\21\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\1\313\25\30\2\0\24\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\1\313\23\30\3\0\3\30\23\0"+
    "\2\30\5\0\6\30\1\314\17\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\14\30\1\315\11\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\15\30\1\316"+
    "\10\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\6\30\1\317\15\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\13\30\1\320\10\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\14\30\1\321"+
    "\7\30\3\0\3\30\23\0\2\30\5\0\10\30\1\322"+
    "\15\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\22\30\1\323\3\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\14\30\1\324\11\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\21\30\1\325\4\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\7\30\1\326\14\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\21\30\1\327\2\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\13\30\1\324\10\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\20\30\1\325"+
    "\3\30\3\0\3\30\23\0\2\30\5\0\21\30\1\330"+
    "\4\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\2\30\1\331\23\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\20\30\1\332\3\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\2\30\1\333"+
    "\21\30\3\0\3\30\23\0\2\30\5\0\3\30\1\334"+
    "\22\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\3\30\1\335\20\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\12\30\1\336\11\30\3\0"+
    "\3\30\6\0\1\337\14\0\2\337\5\0\26\337\2\0"+
    "\24\337\1\0\1\337\1\0\3\337\1\0\14\167\1\255"+
    "\4\167\1\3\72\167\22\0\2\30\5\0\4\30\1\340"+
    "\21\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\4\30\1\341\17\30\3\0\3\30\23\0"+
    "\2\30\5\0\4\30\1\342\21\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\17\30\1\343\6\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\4\30\1\342\17\30\3\0\3\30\23\0\2\30\5\0"+
    "\13\30\1\344\12\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\12\30\1\345\11\30\3\0"+
    "\3\30\23\0\2\30\5\0\17\30\1\346\6\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\1\347\25\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\15\30"+
    "\1\350\10\30\2\0\24\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\16\30\1\351\5\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\1\352\23\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\14\30\1\353"+
    "\7\30\3\0\3\30\23\0\2\30\5\0\14\30\1\354"+
    "\11\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\11\30\1\213\14\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\1\355\25\30\2\0\24\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\13\30\1\354\10\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\1\356"+
    "\23\30\3\0\3\30\23\0\2\30\5\0\17\30\1\357"+
    "\6\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\10\30\1\360\15\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\10\30\1\361\15\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\13\30\1\362\12\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\16\30\1\363\5\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\7\30\1\364\14\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\7\30\1\365\14\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\12\30\1\366"+
    "\11\30\3\0\3\30\23\0\2\30\5\0\21\30\1\367"+
    "\4\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\17\30\1\370\6\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\14\30\1\371\11\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\17\30\1\372\6\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\4\30\1\373"+
    "\21\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\13\30\1\371\10\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\16\30\1\374\5\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\4\30\1\375"+
    "\17\30\3\0\3\30\23\0\2\30\5\0\3\30\1\376"+
    "\22\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\4\30\1\377\21\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\3\30\1\u0100\20\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\4\30\1\377"+
    "\17\30\3\0\3\30\23\0\2\30\5\0\14\30\1\u0101"+
    "\11\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\20\30\1\u0102\5\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\13\30\1\u0101\10\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\17\30\1\u0102"+
    "\4\30\3\0\3\30\23\0\2\30\5\0\1\u0103\25\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\26\30"+
    "\2\0\1\u0104\23\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\20\30\1\u0105\3\30\3\0\3\30\6\0"+
    "\1\u0106\14\0\2\u0106\5\0\26\u0106\2\0\24\u0106\1\0"+
    "\1\u0106\1\0\3\u0106\23\0\2\30\5\0\1\u0107\25\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\26\30"+
    "\2\0\1\u0108\23\30\3\0\3\30\23\0\2\30\5\0"+
    "\10\30\1\u0109\15\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\7\30\1\u010a\14\30\3\0"+
    "\3\30\23\0\2\30\5\0\14\30\1\u010b\11\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\3\30\1\u010c"+
    "\22\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\21\30\1\u010d\4\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\13\30\1\u010b\10\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\3\30\1\u010e"+
    "\20\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\20\30\1\u010f\3\30\3\0\3\30\23\0\2\30\5\0"+
    "\13\30\1\u0110\12\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\12\30\1\u0111\11\30\3\0"+
    "\3\30\23\0\2\30\5\0\21\30\1\u0112\4\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\12\30\1\u0113"+
    "\13\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\14\30\1\u0114\11\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\21\30\1\u0115\4\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\20\30\1\u0116"+
    "\3\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\11\30\1\u0117\12\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\13\30\1\u0114\10\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\20\30\1\u0118\3\30\3\0"+
    "\3\30\23\0\2\30\5\0\17\30\1\u0119\6\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\14\30\1\343"+
    "\11\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\13\30\1\u011a\12\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\17\30\1\u011b\6\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\12\30\1\u011c"+
    "\11\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\16\30\1\u011b\5\30\3\0\3\30\23\0\2\30\5\0"+
    "\1\u011d\25\30\2\0\24\30\3\0\3\30\23\0\2\30"+
    "\5\0\26\30\2\0\1\u011d\23\30\3\0\3\30\23\0"+
    "\2\30\5\0\3\30\1\u011e\22\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\3\30\1\u011f"+
    "\20\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\16\30\1\u0120\5\30\3\0\3\30\6\0\1\u0121\14\0"+
    "\2\u0121\5\0\26\u0121\2\0\24\u0121\1\0\1\u0121\1\0"+
    "\3\u0121\23\0\2\30\5\0\13\30\1\u0122\12\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\12\30\1\u0123\11\30\3\0\3\30\23\0\2\30\5\0"+
    "\17\30\1\u0124\6\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\16\30\1\u0124\5\30\3\0"+
    "\3\30\23\0\2\30\5\0\1\u0125\25\30\2\0\24\30"+
    "\3\0\3\30\23\0\2\30\5\0\14\30\1\u0126\11\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\26\30"+
    "\2\0\1\u0125\23\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\13\30\1\u0126\10\30\3\0\3\30\23\0"+
    "\2\30\5\0\21\30\1\u0127\4\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\20\30\1\u0128"+
    "\3\30\3\0\3\30\23\0\2\30\5\0\1\u0129\25\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\4\30"+
    "\1\u012a\21\30\2\0\24\30\3\0\3\30\23\0\2\30"+
    "\5\0\1\u012b\25\30\2\0\24\30\3\0\3\30\23\0"+
    "\2\30\5\0\26\30\2\0\1\u012c\23\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\4\30\1\u012a\17\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\1\u012b"+
    "\23\30\3\0\3\30\23\0\2\30\5\0\1\u012d\25\30"+
    "\2\0\24\30\3\0\3\30\23\0\2\30\5\0\1\u012e"+
    "\25\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\1\u012e\23\30\3\0\3\30\23\0\2\30"+
    "\5\0\4\30\1\u012f\21\30\2\0\24\30\3\0\3\30"+
    "\23\0\2\30\5\0\26\30\2\0\4\30\1\u0130\17\30"+
    "\3\0\3\30\23\0\2\30\5\0\26\30\2\0\1\u0131"+
    "\23\30\3\0\3\30\23\0\2\30\5\0\14\30\1\u0132"+
    "\11\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\13\30\1\u0132\10\30\3\0\3\30\23\0"+
    "\2\30\5\0\4\30\1\u0133\21\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\4\30\1\u0133"+
    "\17\30\3\0\3\30\23\0\2\30\5\0\17\30\1\u0134"+
    "\6\30\2\0\24\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\16\30\1\u0134\5\30\3\0\3\30\23\0"+
    "\2\30\5\0\20\30\1\u0135\5\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\17\30\1\u0136\6\30\2\0"+
    "\24\30\3\0\3\30\23\0\2\30\5\0\26\30\2\0"+
    "\16\30\1\u0137\5\30\3\0\3\30\23\0\2\30\5\0"+
    "\26\30\2\0\17\30\1\u0135\4\30\3\0\3\30\23\0"+
    "\2\30\5\0\14\30\1\u0138\11\30\2\0\24\30\3\0"+
    "\3\30\23\0\2\30\5\0\26\30\2\0\13\30\1\u0138"+
    "\10\30\3\0\3\30\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19380];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\4\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\23\1\2\11\15\1\5\11\2\0\2\11"+
    "\1\0\1\1\1\0\1\11\1\1\4\11\55\1\3\0"+
    "\1\11\62\1\2\0\61\1\1\0\46\1\1\0\32\1"+
    "\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 67: break;
          case 3:
            { return token(yytext(), "COMILLADOBLE", yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 4:
            { return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 5:
            { return token(yytext(), "PARENTESISABIERTO", yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 6:
            { return token(yytext(), "PARENTESISCERRADO", yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 7:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 8:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 9:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 10:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 11:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 12:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 13:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 14:
            { return token(yytext(), "DOSPUNTOS", yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 15:
            { return token(yytext(), "PUNTOCOMA", yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 16:
            { return token(yytext(), "MENORQUE", yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 17:
            { return token(yytext(), "MAYORQUE", yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 18:
            { return token(yytext(), "ID", yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 19:
            { return token(yytext(), "OR", yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 20:
            { return token(yytext(), "AND", yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 21:
            { return token(yytext(), "CORCHETEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 22:
            { return token(yytext(), "CORCHETECERRADO", yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 23:
            { return token(yytext(), "LLAVEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 24:
            { return token(yytext(), "LLAVECERRADO", yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 25:
            { return token(yytext(), "DIFERENTE", yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 26:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 27:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 28:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 29:
            { return token(yytext(), "ERROR_01", yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 30:
            { return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 31:
            { return token(yytext(), "IGUAL", yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 32:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 33:
            { return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 34:
            { return token(yytext(), "IN", yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 35:
            { return token(yytext(), "NOT", yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 36:
            { return token(yytext(), "IF", yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 37:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 38:
            { return token(yytext(), "POWER", yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 39:
            { return token(yytext(), "END", yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 40:
            { return token(yytext(), "FOR", yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 41:
            { return token(yytext(), "ELSEIF", yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 42:
            { return token(yytext(), "SQRT", yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 43:
            { return token(yytext(), "CLASS", yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 44:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 45:
            { return token(yytext(), "FALSE", yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 46:
            { return token(yytext(), "RANGE", yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 47:
            { return token(yytext(), "NEXT", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 48:
            { return token(yytext(), "STRING", yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 49:
            { return token(yytext(), "ELSE", yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 50:
            { return token(yytext(), "INT", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 51:
            { return token(yytext(), "BEGIN", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 52:
            { return token(yytext(), "BREAK", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 53:
            { return token(yytext(), "OUTPUT", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 54:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 55:
            { return token(yytext(), "DEF", yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 56:
            { return token(yytext(), "INPUT", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 57:
            { return token(yytext(), "EXCEPT", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 58:
            { return token(yytext(), "PRINT", yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 59:
            { return token(yytext(), "TRY", yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 60:
            { return token(yytext(), "RETURN", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 61:
            { return token(yytext(), "BOOLEAN", yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 62:
            { return token(yytext(), "FLOAT", yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 63:
            { return token(yytext(), "IMPORT", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 64:
            { return token(yytext(), "WHILE", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 65:
            { return token(yytext(), "TRUE", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
