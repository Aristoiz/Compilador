// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


@SuppressWarnings("fallthrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\1\2\1\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\3\0\3\10\1\11\1\12\1\10\1\13"+
    "\1\14\1\15\1\16\11\17\2\10\1\20\1\21\1\22"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\32\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\32\1\47"+
    "\1\50\1\32\1\10\1\0\1\10\1\0\1\32\1\0"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\32"+
    "\1\60\2\32\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\32\1\74\1\50"+
    "\1\32\1\10\1\4\1\10\7\0\1\2\73\0\1\75"+
    "\7\0\1\75\3\0\1\75\3\0\1\75\1\0\1\76"+
    "\6\0\1\77\1\0\1\75\1\10\3\0\1\75\7\0"+
    "\1\75\3\0\1\75\3\0\1\75\1\0\1\76\6\0"+
    "\1\75\1\0\1\75\1\10\u012a\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\1\1\2\4\3\2\4\1\2"+
    "\12\1\1\2\22\1\3\0\1\5\2\6\1\7\7\1"+
    "\1\10\1\1\1\10\26\1\1\10\2\1\1\10\10\1"+
    "\3\0\2\5\11\1\1\11\6\1\1\10\42\1\2\0"+
    "\1\5\47\1\1\0\2\1\1\12\25\1\1\0\12\1"+
    "\1\13\4\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\100\0\100"+
    "\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\300\0\u02c0\0\u0300"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0300\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u0100\0\u09c0\0\u0a00\0\u0a40\0\100"+
    "\0\u0a80\0\100\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200"+
    "\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600"+
    "\0\u1640\0\100\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u0300\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u0300\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140"+
    "\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u1600\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700"+
    "\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00"+
    "\0\u2d40\0\u2d80\0\u2dc0\0\u0300\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0"+
    "\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0"+
    "\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0"+
    "\0\u3500\0\u3540\0\u3580\0\u35c0\0\100\0\u3600\0\u3640\0\u3680"+
    "\0\u36c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\0\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\1\17\1\16\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\20\1\26\1\20\1\27\1\30\1\31\1\32\1\20"+
    "\1\33\1\34\1\35\1\20\1\36\1\20\1\31\1\20"+
    "\1\37\1\40\1\41\1\42\1\43\1\20\1\44\1\20"+
    "\1\45\1\46\1\31\1\47\1\20\1\50\1\51\1\52"+
    "\1\20\1\53\2\20\1\31\1\20\101\0\1\2\117\0"+
    "\1\7\64\0\1\7\4\0\2\54\1\0\2\54\3\0"+
    "\52\54\7\0\1\55\11\0\2\55\3\0\55\55\12\0"+
    "\1\7\100\0\1\7\75\0\1\56\3\0\1\57\100\0"+
    "\1\60\1\61\76\0\2\15\101\0\1\7\1\62\73\0"+
    "\2\20\3\0\55\20\16\0\2\20\3\0\14\20\1\63"+
    "\24\20\1\64\13\20\16\0\2\20\3\0\11\20\1\65"+
    "\2\20\1\66\21\20\1\67\16\20\16\0\2\20\3\0"+
    "\4\20\1\70\25\20\1\71\22\20\16\0\2\20\3\0"+
    "\13\20\1\72\10\20\1\73\13\20\1\74\10\20\1\75"+
    "\3\20\16\0\2\20\3\0\1\76\7\20\1\77\1\100"+
    "\14\20\1\101\6\20\1\102\1\103\16\20\16\0\2\20"+
    "\3\0\12\20\1\104\1\105\23\20\1\106\1\107\14\20"+
    "\16\0\2\20\3\0\10\20\1\110\44\20\16\0\2\20"+
    "\3\0\14\20\1\31\24\20\1\31\12\20\1\111\16\0"+
    "\2\20\3\0\1\112\25\20\1\113\26\20\16\0\2\20"+
    "\3\0\1\114\3\20\1\115\7\20\1\116\11\20\1\117"+
    "\3\20\1\120\6\20\1\121\13\20\16\0\2\20\3\0"+
    "\1\122\7\20\1\123\5\20\1\124\7\20\1\125\6\20"+
    "\1\126\5\20\1\127\11\20\16\0\2\20\3\0\4\20"+
    "\1\130\7\20\1\131\15\20\1\132\6\20\1\133\13\20"+
    "\16\0\2\20\3\0\4\20\1\134\25\20\1\135\22\20"+
    "\16\0\2\20\3\0\41\20\1\64\13\20\16\0\2\20"+
    "\3\0\36\20\1\67\16\20\16\0\2\20\3\0\32\20"+
    "\1\71\22\20\16\0\2\20\3\0\40\20\1\74\10\20"+
    "\1\75\3\20\16\0\2\20\3\0\26\20\1\101\6\20"+
    "\1\102\1\103\16\20\16\0\2\20\3\0\37\20\1\106"+
    "\1\107\14\20\16\0\2\20\3\0\35\20\1\136\17\20"+
    "\16\0\2\20\3\0\41\20\1\31\13\20\16\0\2\20"+
    "\3\0\26\20\1\113\26\20\16\0\2\20\3\0\26\20"+
    "\1\117\3\20\1\120\6\20\1\121\13\20\16\0\2\20"+
    "\3\0\26\20\1\125\6\20\1\126\5\20\1\127\11\20"+
    "\16\0\2\20\3\0\32\20\1\132\6\20\1\133\13\20"+
    "\16\0\2\20\3\0\32\20\1\135\22\20\4\0\1\137"+
    "\11\0\2\137\3\0\55\137\11\140\1\141\66\140\1\57"+
    "\1\142\1\57\1\143\74\57\16\0\2\61\76\0\2\20"+
    "\3\0\14\20\1\144\40\20\16\0\2\20\3\0\41\20"+
    "\1\145\13\20\16\0\2\20\3\0\1\146\54\20\16\0"+
    "\2\20\3\0\11\20\1\147\43\20\16\0\2\20\3\0"+
    "\26\20\1\150\26\20\16\0\2\20\3\0\5\20\1\151"+
    "\47\20\16\0\2\20\3\0\33\20\1\152\21\20\16\0"+
    "\2\20\3\0\21\20\1\153\33\20\16\0\2\20\3\0"+
    "\2\20\1\154\12\20\1\155\37\20\16\0\2\20\3\0"+
    "\46\20\1\156\6\20\16\0\2\20\3\0\30\20\1\157"+
    "\11\20\1\155\12\20\16\0\2\20\3\0\11\20\1\160"+
    "\43\20\16\0\2\20\3\0\13\20\1\161\41\20\16\0"+
    "\2\20\3\0\14\20\1\162\40\20\16\0\2\20\3\0"+
    "\36\20\1\163\16\20\16\0\2\20\3\0\40\20\1\164"+
    "\14\20\16\0\2\20\3\0\41\20\1\165\13\20\16\0"+
    "\2\20\3\0\15\20\1\166\37\20\16\0\2\20\3\0"+
    "\10\20\1\167\10\20\1\170\33\20\16\0\2\20\3\0"+
    "\42\20\1\171\12\20\16\0\2\20\3\0\35\20\1\172"+
    "\10\20\1\173\6\20\16\0\2\20\3\0\4\20\1\174"+
    "\50\20\16\0\2\20\3\0\12\20\1\175\42\20\16\0"+
    "\2\20\3\0\17\20\1\176\35\20\16\0\2\20\3\0"+
    "\44\20\1\177\10\20\16\0\2\20\3\0\13\20\1\200"+
    "\41\20\16\0\2\20\3\0\1\201\20\20\1\202\33\20"+
    "\16\0\2\20\3\0\12\20\1\203\42\20\16\0\2\20"+
    "\3\0\40\20\1\204\14\20\16\0\2\20\3\0\26\20"+
    "\1\205\17\20\1\206\6\20\16\0\2\20\3\0\37\20"+
    "\1\207\15\20\16\0\2\20\3\0\11\20\1\210\43\20"+
    "\16\0\2\20\3\0\6\20\1\211\4\20\1\212\41\20"+
    "\16\0\2\20\3\0\17\20\1\213\35\20\16\0\2\20"+
    "\3\0\36\20\1\214\16\20\16\0\2\20\3\0\34\20"+
    "\1\215\3\20\1\216\14\20\16\0\2\20\3\0\44\20"+
    "\1\217\10\20\16\0\2\20\3\0\24\20\1\220\30\20"+
    "\16\0\2\20\3\0\13\20\1\221\41\20\16\0\2\20"+
    "\3\0\51\20\1\222\3\20\16\0\2\20\3\0\40\20"+
    "\1\223\14\20\16\0\2\20\3\0\17\20\1\224\35\20"+
    "\16\0\2\20\3\0\44\20\1\225\10\20\16\0\2\20"+
    "\3\0\32\20\1\226\22\20\4\0\1\227\11\0\2\227"+
    "\3\0\55\227\11\140\1\230\77\140\1\230\3\140\1\231"+
    "\62\140\1\0\1\142\114\0\2\20\3\0\11\20\1\232"+
    "\43\20\16\0\2\20\3\0\36\20\1\233\16\20\16\0"+
    "\2\20\3\0\20\20\1\234\34\20\16\0\2\20\3\0"+
    "\14\20\1\235\40\20\16\0\2\20\3\0\45\20\1\236"+
    "\7\20\16\0\2\20\3\0\10\20\1\237\44\20\16\0"+
    "\2\20\3\0\35\20\1\240\17\20\16\0\2\20\3\0"+
    "\4\20\1\241\12\20\1\242\35\20\16\0\2\20\3\0"+
    "\4\20\1\243\50\20\16\0\2\20\3\0\32\20\1\244"+
    "\11\20\1\245\10\20\16\0\2\20\3\0\32\20\1\246"+
    "\22\20\16\0\2\20\3\0\20\20\1\212\34\20\16\0"+
    "\2\20\3\0\1\247\54\20\16\0\2\20\3\0\21\20"+
    "\1\250\33\20\16\0\2\20\3\0\45\20\1\216\7\20"+
    "\16\0\2\20\3\0\46\20\1\251\6\20\16\0\2\20"+
    "\3\0\14\20\1\252\2\20\1\253\35\20\16\0\2\20"+
    "\3\0\2\20\1\254\52\20\16\0\2\20\3\0\4\20"+
    "\1\255\50\20\16\0\2\20\3\0\41\20\1\256\2\20"+
    "\1\257\10\20\16\0\2\20\3\0\30\20\1\260\24\20"+
    "\16\0\2\20\3\0\32\20\1\261\22\20\16\0\2\20"+
    "\3\0\13\20\1\262\41\20\16\0\2\20\3\0\4\20"+
    "\1\263\50\20\16\0\2\20\3\0\1\164\54\20\16\0"+
    "\2\20\3\0\26\20\1\164\26\20\16\0\2\20\3\0"+
    "\6\20\1\212\46\20\16\0\2\20\3\0\11\20\1\155"+
    "\43\20\16\0\2\20\3\0\14\20\1\264\40\20\16\0"+
    "\2\20\3\0\15\20\1\265\37\20\16\0\2\20\3\0"+
    "\34\20\1\216\20\20\16\0\2\20\3\0\36\20\1\155"+
    "\16\20\16\0\2\20\3\0\41\20\1\266\13\20\16\0"+
    "\2\20\3\0\42\20\1\267\12\20\16\0\2\20\3\0"+
    "\10\20\1\270\44\20\16\0\2\20\3\0\22\20\1\234"+
    "\32\20\16\0\2\20\3\0\14\20\1\164\40\20\16\0"+
    "\2\20\3\0\21\20\1\155\33\20\16\0\2\20\3\0"+
    "\35\20\1\271\17\20\16\0\2\20\3\0\47\20\1\236"+
    "\5\20\16\0\2\20\3\0\41\20\1\164\13\20\16\0"+
    "\2\20\3\0\46\20\1\155\6\20\16\0\2\20\3\0"+
    "\21\20\1\272\33\20\16\0\2\20\3\0\2\20\1\273"+
    "\52\20\16\0\2\20\3\0\46\20\1\274\6\20\16\0"+
    "\2\20\3\0\30\20\1\275\24\20\16\0\2\20\3\0"+
    "\3\20\1\276\51\20\16\0\2\20\3\0\31\20\1\277"+
    "\23\20\16\0\2\20\3\0\40\20\1\300\14\20\4\0"+
    "\1\301\11\0\2\301\3\0\55\301\11\140\1\230\3\140"+
    "\1\142\62\140\16\0\2\20\3\0\4\20\1\302\50\20"+
    "\16\0\2\20\3\0\32\20\1\303\22\20\16\0\2\20"+
    "\3\0\4\20\1\164\50\20\16\0\2\20\3\0\17\20"+
    "\1\304\35\20\16\0\2\20\3\0\32\20\1\164\22\20"+
    "\16\0\2\20\3\0\13\20\1\305\41\20\16\0\2\20"+
    "\3\0\40\20\1\306\14\20\16\0\2\20\3\0\17\20"+
    "\1\272\35\20\16\0\2\20\3\0\1\270\54\20\16\0"+
    "\2\20\3\0\15\20\1\307\37\20\16\0\2\20\3\0"+
    "\44\20\1\274\10\20\16\0\2\20\3\0\26\20\1\271"+
    "\26\20\16\0\2\20\3\0\42\20\1\310\12\20\16\0"+
    "\2\20\3\0\11\20\1\164\43\20\16\0\2\20\3\0"+
    "\1\311\54\20\16\0\2\20\3\0\26\20\1\312\26\20"+
    "\16\0\2\20\3\0\17\20\1\313\35\20\16\0\2\20"+
    "\3\0\10\20\1\314\44\20\16\0\2\20\3\0\10\20"+
    "\1\212\44\20\16\0\2\20\3\0\13\20\1\315\41\20"+
    "\16\0\2\20\3\0\44\20\1\316\10\20\16\0\2\20"+
    "\3\0\35\20\1\317\17\20\16\0\2\20\3\0\35\20"+
    "\1\216\17\20\16\0\2\20\3\0\40\20\1\320\14\20"+
    "\16\0\2\20\3\0\21\20\1\321\33\20\16\0\2\20"+
    "\3\0\17\20\1\322\35\20\16\0\2\20\3\0\17\20"+
    "\1\323\35\20\16\0\2\20\3\0\4\20\1\324\50\20"+
    "\16\0\2\20\3\0\44\20\1\325\10\20\16\0\2\20"+
    "\3\0\32\20\1\326\22\20\16\0\2\20\3\0\3\20"+
    "\1\176\51\20\16\0\2\20\3\0\31\20\1\177\23\20"+
    "\16\0\2\20\3\0\14\20\1\155\40\20\16\0\2\20"+
    "\3\0\20\20\1\164\34\20\16\0\2\20\3\0\41\20"+
    "\1\155\13\20\16\0\2\20\3\0\45\20\1\164\7\20"+
    "\16\0\2\20\3\0\1\327\54\20\16\0\2\20\3\0"+
    "\26\20\1\330\26\20\16\0\2\20\3\0\46\20\1\331"+
    "\6\20\4\0\1\332\11\0\2\332\3\0\55\332\16\0"+
    "\2\20\3\0\1\333\54\20\16\0\2\20\3\0\26\20"+
    "\1\334\26\20\16\0\2\20\3\0\10\20\1\324\44\20"+
    "\16\0\2\20\3\0\35\20\1\326\17\20\16\0\2\20"+
    "\3\0\21\20\1\212\33\20\16\0\2\20\3\0\46\20"+
    "\1\216\6\20\16\0\2\20\3\0\13\20\1\335\41\20"+
    "\16\0\2\20\3\0\40\20\1\336\14\20\16\0\2\20"+
    "\3\0\21\20\1\337\33\20\16\0\2\20\3\0\12\20"+
    "\1\234\42\20\16\0\2\20\3\0\21\20\1\176\33\20"+
    "\16\0\2\20\3\0\46\20\1\340\6\20\16\0\2\20"+
    "\3\0\37\20\1\236\15\20\16\0\2\20\3\0\46\20"+
    "\1\177\6\20\16\0\2\20\3\0\17\20\1\341\35\20"+
    "\16\0\2\20\3\0\14\20\1\304\40\20\16\0\2\20"+
    "\3\0\13\20\1\176\41\20\16\0\2\20\3\0\17\20"+
    "\1\164\35\20\16\0\2\20\3\0\40\20\1\177\14\20"+
    "\16\0\2\20\3\0\44\20\1\164\10\20\16\0\2\20"+
    "\3\0\3\20\1\342\51\20\16\0\2\20\3\0\31\20"+
    "\1\343\23\20\16\0\2\20\3\0\44\20\1\344\10\20"+
    "\4\0\1\345\11\0\2\345\3\0\55\345\16\0\2\20"+
    "\3\0\13\20\1\212\41\20\16\0\2\20\3\0\40\20"+
    "\1\216\14\20\16\0\2\20\3\0\21\20\1\346\33\20"+
    "\16\0\2\20\3\0\46\20\1\347\6\20\16\0\2\20"+
    "\3\0\1\324\54\20\16\0\2\20\3\0\26\20\1\326"+
    "\26\20\16\0\2\20\3\0\1\273\54\20\16\0\2\20"+
    "\3\0\4\20\1\350\50\20\16\0\2\20\3\0\32\20"+
    "\1\351\22\20\16\0\2\20\3\0\26\20\1\275\26\20"+
    "\16\0\2\20\3\0\4\20\1\155\50\20\16\0\2\20"+
    "\3\0\32\20\1\155\22\20\16\0\2\20\3\0\17\20"+
    "\1\212\35\20\16\0\2\20\3\0\44\20\1\216\10\20";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14080];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\43\1\3\0\1\1\1\11"+
    "\1\1\1\11\54\1\3\0\1\11\64\1\2\0\50\1"+
    "\1\0\30\1\1\0\12\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color) {
        return new TextColor((int)start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
          // fall through
          case 12: break;
          case 2:
            { return textColor(yychar, yylength(), new Color(0,0,0));
            }
          // fall through
          case 13: break;
          case 3:
            { 
            }
          // fall through
          case 14: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(35,120,147));
            }
          // fall through
          case 15: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(146,146,146));
            }
          // fall through
          case 16: break;
          case 6:
            { return textColor(yychar, yylength(), Color.RED);
            }
          // fall through
          case 17: break;
          case 7:
            { return textColor(yychar, yylength(), Color.GREEN);
            }
          // fall through
          case 18: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(155,38,182));
            }
          // fall through
          case 19: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(105,99,32));
            }
          // fall through
          case 20: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(148,58,173));
            }
          // fall through
          case 21: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(224,195,12));
            }
          // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
